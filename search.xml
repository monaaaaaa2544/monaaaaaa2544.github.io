<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex标签总结</title>
    <url>/2022/03/16/Latex%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Latex标签总结</p>
<span id="more"></span>

<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vspace&#123;2.5cm&#125; 垂直间距</span><br><span class="line">\hspace&#123;2.5cm&#125; 水平间距</span><br></pre></td></tr></table></figure>

<h2 id="插入参考文献"><a href="#插入参考文献" class="headerlink" title="插入参考文献"></a>插入参考文献</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\bibliographystyle&#123;IEEEtran&#125;   //IEEEtran为给定模板格式定义文件名</span><br><span class="line"></span><br><span class="line">\bibliography&#123;ref&#125;           //ref为.bib文件名</span><br></pre></td></tr></table></figure>

<h2 id="插入算法"><a href="#插入算法" class="headerlink" title="插入算法"></a>插入算法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\usepackage&#123;algorithm&#125;  </span><br><span class="line">\usepackage&#123;algorithmicx&#125;  </span><br><span class="line">\usepackage&#123;algpseudocode&#125;</span><br></pre></td></tr></table></figure>
<p>不要再使用algorithmic，使用如上三个就可以</p>
<h2 id="插入图片及排版方法"><a href="#插入图片及排版方法" class="headerlink" title="插入图片及排版方法"></a>插入图片及排版方法</h2><h3 id="跨栏放置图片"><a href="#跨栏放置图片" class="headerlink" title="跨栏放置图片"></a>跨栏放置图片</h3><p>在论文排版为双栏时，需要跨栏放置图片，只需要在 <code>\begin&#123;figure&#125;</code> 和 <code>&#123;\end&#123;figure&#125;&#125;</code> 上带星号 <code>*</code> 即可。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a herf='https://blog.csdn.net/qq_31347869/article/details/103832190' >LaTex笔记一：图片的插入及排版方法</a> </p>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2022/03/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一些常用的Linux命令</p>
<span id="more"></span>


<h3 id="查看gpu资源使用情况"><a href="#查看gpu资源使用情况" class="headerlink" title="查看gpu资源使用情况"></a>查看gpu资源使用情况</h3><p>watch -n1 gpustat -cpu </p>
<h3 id="查看文件目录下的文件数有多少"><a href="#查看文件目录下的文件数有多少" class="headerlink" title="查看文件目录下的文件数有多少"></a>查看文件目录下的文件数有多少</h3><p>ls -lR| grep “^-“ | wc -l</p>
<h3 id="解压文件到一个文件夹下"><a href="#解压文件到一个文件夹下" class="headerlink" title="解压文件到一个文件夹下"></a>解压文件到一个文件夹下</h3><p>tar -xvf 文件名   </p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>mv 起始路径 目标路径</p>
<h3 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h3><p>mv 文件名 文件名</p>
<h3 id="把本地的jpeg文件拷贝到服务器上的ISIC目录下"><a href="#把本地的jpeg文件拷贝到服务器上的ISIC目录下" class="headerlink" title="把本地的jpeg文件拷贝到服务器上的ISIC目录下"></a>把本地的jpeg文件拷贝到服务器上的ISIC目录下</h3><p>scp -r D:&#x2F;各种文档&#x2F;研究生&#x2F;代码&#x2F;data&#x2F;jpeg&#x2F; <a href="mailto:&#x78;&#x69;&#110;&#x79;&#117;&#x61;&#x6e;&#x40;&#x31;&#55;&#x32;&#x2e;&#51;&#49;&#46;&#50;&#x32;&#54;&#x2e;&#x31;&#53;&#x36;">&#x78;&#x69;&#110;&#x79;&#117;&#x61;&#x6e;&#x40;&#x31;&#55;&#x32;&#x2e;&#51;&#49;&#46;&#50;&#x32;&#54;&#x2e;&#x31;&#53;&#x36;</a>:&#x2F;home&#x2F;data&#x2F;xinyuan&#x2F;adv_train_wbc&#x2F;data&#x2F;ISIC&#x2F; </p>
<h3 id="把192-168-0-10机器上的source-txt文件拷贝到本地的-x2F-home-x2F-work目录下"><a href="#把192-168-0-10机器上的source-txt文件拷贝到本地的-x2F-home-x2F-work目录下" class="headerlink" title="把192.168.0.10机器上的source.txt文件拷贝到本地的&#x2F;home&#x2F;work目录下"></a>把192.168.0.10机器上的source.txt文件拷贝到本地的&#x2F;home&#x2F;work目录下</h3><p>scp <a href="mailto:&#x77;&#x6f;&#x72;&#x6b;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#46;&#48;&#46;&#49;&#x30;">&#x77;&#x6f;&#x72;&#x6b;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#46;&#48;&#46;&#49;&#x30;</a>:&#x2F;home&#x2F;work&#x2F;source.txt &#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="把192-168-0-10机器上的source-txt文件拷贝到192-168-0-11机器的-x2F-home-x2F-work目录下"><a href="#把192-168-0-10机器上的source-txt文件拷贝到192-168-0-11机器的-x2F-home-x2F-work目录下" class="headerlink" title="把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的&#x2F;home&#x2F;work目录下"></a>把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的&#x2F;home&#x2F;work目录下</h3><p>scp <a href="mailto:&#x77;&#111;&#x72;&#x6b;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#x30;&#46;&#x31;&#48;">&#x77;&#111;&#x72;&#x6b;&#x40;&#x31;&#x39;&#x32;&#46;&#x31;&#x36;&#x38;&#x2e;&#x30;&#46;&#x31;&#48;</a>:&#x2F;home&#x2F;work&#x2F;source.txt <a href="mailto:&#x77;&#x6f;&#114;&#107;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#48;&#46;&#49;&#49;">&#x77;&#x6f;&#114;&#107;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#x2e;&#48;&#46;&#49;&#49;</a>:&#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="拷贝文件夹，加-r参数-拷贝整个目录"><a href="#拷贝文件夹，加-r参数-拷贝整个目录" class="headerlink" title="拷贝文件夹，加-r参数(拷贝整个目录)"></a>拷贝文件夹，加-r参数(拷贝整个目录)</h3><p>scp -r &#x2F;home&#x2F;work&#x2F;sourcedir <a href="mailto:&#x77;&#111;&#114;&#x6b;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x30;&#x2e;&#x31;&#x30;">&#x77;&#111;&#114;&#x6b;&#x40;&#49;&#57;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#x30;&#x2e;&#x31;&#x30;</a>:&#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="png-jpg图像转换为矢量图-eps-c保证转换后保证图像彩色"><a href="#png-jpg图像转换为矢量图-eps-c保证转换后保证图像彩色" class="headerlink" title=".png .jpg图像转换为矢量图 .eps -c保证转换后保证图像彩色"></a>.png .jpg图像转换为矢量图 .eps <code>-c</code>保证转换后保证图像彩色</h3><p>bmeps -c .\diff_adv_clean_pgd4.png diff.eps  </p>
<h3 id="后台运行命令"><a href="#后台运行命令" class="headerlink" title="后台运行命令"></a>后台运行命令</h3><p>nohup COMMAND &amp;<br>nohup sh test.sh &amp;</p>
<h3 id="后台运行命令-不记录任何日志"><a href="#后台运行命令-不记录任何日志" class="headerlink" title="后台运行命令(不记录任何日志)"></a>后台运行命令(不记录任何日志)</h3><p>nohup python gp&#x2F;trained.py -w 35 &gt;&#x2F;dev&#x2F;null  2&gt;&amp;1 &amp;</p>
<h3 id="查看后台运行的进程列表"><a href="#查看后台运行的进程列表" class="headerlink" title="查看后台运行的进程列表"></a>查看后台运行的进程列表</h3><p>jobs</p>
<h3 id="将后台运行的命令放到前台继续运行"><a href="#将后台运行的命令放到前台继续运行" class="headerlink" title="将后台运行的命令放到前台继续运行"></a>将后台运行的命令放到前台继续运行</h3><p>fg %jobname </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3项目时出过的错</title>
    <url>/2022/03/12/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8TS%E6%B3%A8%E6%84%8F/</url>
    <content><![CDATA[<p>写Vue3项目时出过的错</p>
<span id="more"></span>

<ol>
<li><p>store中的变量都命成响应式</p>
</li>
<li><p>prop传入的值直接使用，不用用变量接收</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 以下是错误的 --&gt;</span><br><span class="line">&lt;li v-for=&quot;tag in tagList&quot; :key=&quot;tag.id&quot;</span><br><span class="line">                            :class=&quot;&#123;selected: selectedTags.indexOf(tag)&gt;=0&#125;&quot;</span><br><span class="line">                            @click=&quot;toggle(tag)&quot;&gt;</span><br><span class="line">                        &#123;&#123;tag.name&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">const tagList=reactive&lt;any&gt;(props.tags) </span><br></pre></td></tr></table></figure>
</li>
<li><p>@绑定的方法，不用传入值，直接用event.target.xx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function inputContent(evt: MouseEvent)&#123;</span><br><span class="line">    input = evt.target.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Vue3中父子组件传值</title>
    <url>/2022/03/09/Vue3%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><ul>
<li>父组件给子组件传值用defineProps</li>
<li>子组件给父组件传值用defineEmits<span id="more"></span></li>
</ul>
<h2 id="二、父组件给子组件传值"><a href="#二、父组件给子组件传值" class="headerlink" title="二、父组件给子组件传值"></a>二、父组件给子组件传值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;Types v-model:type=&quot;record.type&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">const props=defineProps(&#123;</span><br><span class="line">    type: String</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(props.type)</span><br></pre></td></tr></table></figure>

<h2 id="三、子组件给父组件传值"><a href="#三、子组件给父组件传值" class="headerlink" title="三、子组件给父组件传值"></a>三、子组件给父组件传值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;Types v-model:type=&quot;record.type&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">const emit=defineEmits&lt;&#123;</span><br><span class="line">    (event: &#x27;update:type&#x27;, types: string): void</span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href='https://mp.weixin.qq.com/s/pUYCDIIk4GQ5DeIjAuEdBQ'>Vue3.2 中的 setup 语法糖，保证你看的明明白白！</a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Web中数据的保存</title>
    <url>/2022/03/09/Web%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h2 id="一、几种数据保存方法"><a href="#一、几种数据保存方法" class="headerlink" title="一、几种数据保存方法"></a>一、几种数据保存方法</h2><ul>
<li>LocalStorage</li>
<li>Vuex<span id="more"></span></li>
</ul>
<h2 id="二、LocalStorage"><a href="#二、LocalStorage" class="headerlink" title="二、LocalStorage"></a>二、LocalStorage</h2><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(&quot;name&quot;, JSON.stringify(data))</span><br></pre></td></tr></table></figure>
<p>注意这里保存的data是字符串格式，所以需要用<code>JSON.stringify()</code>转换成字符格式</p>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse(localStorage.getItem(localStorageKeyName))</span><br></pre></td></tr></table></figure>
<p>读取数据时也需要用<code>JSON.parse()</code>解析字符串</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TS语法</title>
    <url>/2022/03/10/TS%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>总结TS的语法</p>
<span id="more"></span>



<h2 id="推荐查阅"><a href="#推荐查阅" class="headerlink" title="推荐查阅"></a>推荐查阅</h2><p><a href='https://www.tslang.cn/docs/handbook/basic-types.html'>TS官方文档</a><br><a href='https://mp.weixin.qq.com/s/pQNCLOZWsqXi6NScyWhdEg'>微信公众号的总结</a><br><a href='https://time.geekbang.org/course/detail/211-128376'>TS开发实战</a><br><a href='https://mp.weixin.qq.com/s/pUYCDIIk4GQ5DeIjAuEdBQ'>Vue3.2 中的 setup 语法糖，保证你看的明明白白！</a></p>
<h2 id="TS基础"><a href="#TS基础" class="headerlink" title="TS基础"></a>TS基础</h2><p><a href="https://imgtu.com/i/bh2YsP"><img src="https://s1.ax1x.com/2022/03/10/bh2YsP.md.png" alt="bh2YsP.md.png"></a></p>
<h2 id="TS介绍"><a href="#TS介绍" class="headerlink" title="TS介绍"></a>TS介绍</h2><p>Typescript是静态弱类型语言。</p>
<ul>
<li>静态是指在编译是会检查变量类型，动态是在执行时才检查，所以动态类型的语言运行速度慢</li>
<li>弱类型是指当一个变量已经被定义了类型，但是可根据环境变化自动转换，不需要强制转换</li>
</ul>
<p>关于各种语言类型的分类可查阅：<a href="https://www.zhihu.com/question/19918532">https://www.zhihu.com/question/19918532</a></p>
<h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p>JS八种内置类型：string、number、Boolean、bigint、null、undefined、symbol、object<br>ECMAScript 的内置对象：Array Date Error<br>DOM 和 BOM: HTMLElement、NodeList、MouseEvent<br>TS 核心库的定义文件: Math.pow addEventListener</p>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>interface是TS设计出来用于定义对象类型的</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>public: 公有的。能被实例化、子类继承<br>private: 私有的。只属于这个类自己，它的实例和子类都访问不到<br>protected：被保护的。子类可以访问，实例不能访问<br>static：静态属性。类上的一些常量，实例和子类都不能访问<br>抽象类：只能被继承不能实例化的类<br>抽象方法：必须在子类中实现<br>多态：父类定义一个抽象方法，在多个子类中有不同的实现</p>
<h3 id="接口和类的关系"><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h3><ol>
<li>类实现接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface StudentInterface&#123;</span><br><span class="line">    sayName(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student implements StudentInterface&#123;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(&#x27;say Name&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="TS进阶"><a href="#TS进阶" class="headerlink" title="TS进阶"></a>TS进阶</h2><p><a href="https://imgtu.com/i/bHbU8H"><img src="https://s1.ax1x.com/2022/03/12/bHbU8H.md.png" alt="bHbU8H.md.png"></a></p>
<h2 id="TS实战"><a href="#TS实战" class="headerlink" title="TS实战"></a>TS实战</h2><h3 id="Vue3-todoList"><a href="#Vue3-todoList" class="headerlink" title="Vue3 todoList"></a>Vue3 todoList</h3><p>涉及知识</p>
<ul>
<li>Vue3</li>
<li>script setup</li>
<li>ref</li>
<li>computed</li>
<li>条件渲染和列表渲染</li>
<li>数据绑定和 v-model</li>
<li>事件</li>
</ul>
<p>TS</p>
<ul>
<li>基础类型</li>
<li>接口</li>
<li>泛型</li>
<li>TS 结合 Vue3</li>
</ul>
<p>要实现的功能</p>
<ul>
<li>新增待办事项</li>
<li>删除待办事项</li>
<li>全选和取消全选功能</li>
<li>清理已做事项</li>
</ul>
<h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>如果函数的返回值是由输入类型决定的，所以一定会用到泛型</p>
]]></content>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vim快捷键</title>
    <url>/2022/03/21/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>vim快捷键总结</p>
<span id="more"></span>

<p><a href='https://coolshell.cn/articles/5426.html'>简明Vim练级攻略</a><br><a href='https://muyuuuu.github.io/2021/08/28/vim-learn/'>关于六天掌握 Vim 这件事</a><br><a href='https://chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim'>Vscode和Vim</a></p>
<h2 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h2><p>dd 删除一行<br>i 切换insert模式<br>x 删除一个字符<br>u 撤销删除<br>:wq 保存+退出<br>hljk 左右上下<br>:help [commend] 显示相关命令帮助<br>个人配置后：更快速的移动 normal 模式下 J &#x3D;&gt; 5j, K &#x3D;&gt; 5k</p>
<h2 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h2><p>a 在光标后插入<br>o 在当前行后面插入新行<br>O 当前行前面插入新行<br>cw 替换从光标所在位置后到一个单词结尾的字符</p>
<p>p 粘贴剪切板<br>yy 复制当前行</p>
<p>:e [path] 打开一个文件<br>:q! 退出不保存</p>
<p>0 光标移动到行首<br>$ 光标移动到行尾</p>
<p>v进入visual模式，光标移动进行选中，y进行复制，p进行粘贴</p>
<h2 id="day-3"><a href="#day-3" class="headerlink" title="day 3"></a>day 3</h2><p>. 重复上一次命令<br>2dd 删除2行<br>10p 粘贴文本10次</p>
<p>gg 移动到文件开头<br>G 移动到文件末尾<br>NG 移动到第N行<br>gd 跳转到定义<br>gh 相当于鼠标悬停到光标所在位置</p>
<p>ctrl+f 向下翻页<br>ctrl+b 向上翻页<br>ctrl+e 逐行向下翻页<br>ctrl+y 逐行向上翻页</p>
<p>b 上一个单词开头<br>e 当前单词结尾</p>
<p>% 匹配括号移动<br>* 匹配光标当前单词，移动光标到下一个单词</p>
<p><code>0y$</code> 从行头复制到行尾<br>ye 从当前位置拷贝到本单词最后一个字符</p>
<p>gU 变大写<br>gu 变小写</p>
<h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><p>ye 复制光标后的单词<br>yl 复制光标后的字符<br>yh 复制光标前的字符</p>
<p>dd 删除整行<br>dw 删除当前单词</p>
<h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><p>jj 个人配置的esc键<br>xx 个人配置的：再行末添加</p>
<p>zz 当前行放在页面中间<br>H(head) 移动到屏幕顶部<br>M(middle) 移动到屏幕中间</p>
<h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p><a href="https://zhuanlan.zhihu.com/p/64533566">https://zhuanlan.zhihu.com/p/64533566</a><br><a href="https://linuxfstab.com/2020/03/22/vimium/">https://linuxfstab.com/2020/03/22/vimium/</a><br>T 搜索标签页<br>f+[] 打开网页<br>O 搜索<br>H 返回上一页</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言</title>
    <url>/2022/04/20/go%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>go语言</p>
<span id="more"></span>

<h2 id="go学习资料"><a href="#go学习资料" class="headerlink" title="go学习资料"></a>go学习资料</h2><p><a href='https://time.geekbang.org/course/intro/100024001?tab=catalog'>极客时间Go语言开发入门到实战</a><br><a href='https://gitee.com/geektime-geekbang/go_learning/tree/master/code'>极客时间 github go-learning</a><br><a href='https://gobyexample-cn.github.io/'>Go by Example</a><br><a href='https://github.com/monaaaaaa2544/go-learning/tree/main'>mona github go-learning</a><br><a href='https://learnku.com/docs/the-way-to-go/interact-with-other-languages/3581'>go 入门指南</a></p>
<h2 id="go介绍"><a href="#go介绍" class="headerlink" title="go介绍"></a>go介绍</h2><p>简单、并发编程、内存管理、垃圾回收机制、静态强类型（不支持隐式类型转换）语言、go的关键字很少：28个、go被称为区块链开发语言</p>
<h2 id="go知识点"><a href="#go知识点" class="headerlink" title="go知识点"></a>go知识点</h2><p>os.Args[1] 获取命令行参数<br>os.Exit(-1) 退出<br>a,b&#x3D;b,a 交换两个值<br>go test -v 【文件名】打印测试结果<br>go不支持指针运算<br>go无法进行隐式类型转换<br>go没有前置++ –<br>go中的比较是比较值而不是引用<br>iota常量<br>&amp;^按位置零<br>循环语句 for<br>条件语句 if switch</p>
<h6 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h6><p>数组和切片的声明<br>切片不需要说明长度: s :&#x3D;[]int{1,2,3}；数组声明需要指定元素类型及元素个数: a :&#x3D;[…]int{1,2,3}<br>make创建切片：make([]int, 1, 5)<br>切片包含：指针、length、cap<br>切片不可以比较，数组可以比较</p>
<h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><p>Map的声明：make(map[string]int, 10)<br>Map遍历：for k,v:&#x3D; range m1{}<br>go中没有Set，用Map实现Set</p>
<h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p>声明String字符串：s:&#x3D;’asdfasdf’<br>常用字符串函数：strings、strconv<br>字符串分割\拼接：strings.Split、strings.Join<br>字符串类型转换: strconv.Atoi、strconv.Itoa</p>
<h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>Defer<br>函数可返回多个值</p>
<h6 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h6><p>go 不支持继承<br>结构体定义<br>接口实现</p>
<h6 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h6><p>Error()<br>Panic 后会执行defer<br>os.Exit() 后不会执行defer<br>recover panic</p>
<h6 id="包和依赖管理"><a href="#包和依赖管理" class="headerlink" title="包和依赖管理"></a>包和依赖管理</h6><p>构建可复用模块<br>go mod init<br>init()<br>推荐包：concurrent-map glide(包管理工具)<br>下载命令：go get -u 地址</p>
<h6 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h6><p>协程机制和传统线程机制的区别<br>开启协程：go func(){}()<br>共享内存并发机制：互斥锁（sync.Mutex）WaitGroup</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2022/03/22/leetcode/</url>
    <content><![CDATA[<p>刷题记录</p>
<span id="more"></span>

<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href='https://drive.google.com/drive/folders/1OW2PlBQJJO1TFZq06qufW67jyuGM_Tws?usp=sharing'>左程云算法基础</a><br><a href='https://drive.google.com/file/d/1_DOFkrVhQCP3cLgeYzac1SLvin9iMD5f/view?usp=sharing'>程序员代码面试指南 IT名企算法与数据结构题目最优解 ,左程云著</a><br><a href='https://labuladong.github.io/algo/'>- labuladong算法小炒</a></p>
<h2 id="刷题顺序："><a href="#刷题顺序：" class="headerlink" title="刷题顺序："></a>刷题顺序：</h2><ul>
<li><a href='https://leetcode-cn.com/study-plan/algorithms/?progress=7mrgdjd'>算法20天：</a></li>
<li><a href='https://leetcode-cn.com/study-plan/lcof/?progress=7mrtbrg'>剑指offer1：</a></li>
<li><a href='https://leetcode-cn.com/problemset/all/?listId=xb9nqhhg&page=1'>剑指第二版：</a></li>
<li><a href='https://leetcode-cn.com/problemset/all/?listId=e8X3pBZi&page=1'>剑指专项突击：</a></li>
<li><a href='https://www.nowcoder.com/study/vod/1'>牛客刷题集合</a></li>
<li><a href='https://www.acwing.com/problem/'>AcWing</a></li>
<li><a href='https://docs.google.com/spreadsheets/d/1yRCOJ8KysRVkq0O9IlDriT01tC6lzPapmFO4PCmDJQA/edit#gid=126913158'>花花酱 LeetCode Problem List 题目列表</a><br>程序员算法面试指南左程云<br><a href='https://www.algomooc.com/firstcamp'>吴师兄刷题解析</a></li>
</ul>
<h2 id="python-刷题常用模块"><a href="#python-刷题常用模块" class="headerlink" title="python 刷题常用模块"></a>python 刷题常用模块</h2><p><a href='https://blog.csdn.net/Shenpibaipao/article/details/105873407'>[Python][刷题常用模块]用Python刷题，这一篇就够了</a><br><a href="https://blog.nowcoder.net/n/b4d00041304748b1a522275243fd87e6">https://blog.nowcoder.net/n/b4d00041304748b1a522275243fd87e6</a><br><a href="https://xdren69.github.io/2021/03/31/leetcode-python/">https://xdren69.github.io/2021/03/31/leetcode-python/</a><br><a href="http://www-quic.zhihu.com/question/392867890">http://www-quic.zhihu.com/question/392867890</a><br><a href='https://codingdict.com/article/4843'>CodingDict</a></p>
<ol>
<li><p>max(a, b)</p>
</li>
<li><p>队列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; import queue </span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br><span class="line">&gt; q=queue.Queue(5)</span><br><span class="line">&gt;</span><br><span class="line">&gt; q.put(123)</span><br><span class="line">&gt;</span><br><span class="line">&gt; q.get()</span><br></pre></td></tr></table></figure></li>
<li><p>优先级队列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;import queue</span><br><span class="line">&gt;</span><br><span class="line">&gt;q=queue.PriorityQueue()</span><br><span class="line">&gt;</span><br><span class="line">&gt;同上put get</span><br><span class="line">&gt;</span><br><span class="line">&gt;结构相当于一个堆</span><br></pre></td></tr></table></figure></li>
<li><p>栈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;from collections import deque</span><br><span class="line">&gt;</span><br><span class="line">&gt;s=deque()</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.append(1)</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.pop()</span><br><span class="line">&gt;</span><br><span class="line">&gt;或者用LifoQueue</span><br><span class="line">&gt;</span><br><span class="line">&gt;from queue</span><br><span class="line">&gt;</span><br><span class="line">&gt;s=queue.LifoQueue()</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.put(1)</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.get()</span><br></pre></td></tr></table></figure>
</li>
<li><p>有时候用python报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: local variable &#x27;sum&#x27; referenced before assignment</span><br><span class="line">    sum+=root.val</span><br><span class="line">Line 20 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root)</span><br><span class="line">Line 27 in convertBST (Solution.py)</span><br><span class="line">    ret = Solution().convertBST(param_1)</span><br><span class="line">Line 49 in _driver (Solution.py)</span><br><span class="line">    _driver()</span><br><span class="line">Line 60 in &lt;module&gt; (Solution.py)</span><br><span class="line"></span><br><span class="line">解决方法：nonlocal 定义非定义域所在变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>python 创建二维数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[[<span class="number">0</span>]*<span class="number">3</span>]*<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python 小顶堆</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网：https://docs.python.org/zh-cn/3/library/heapq.html</span><br><span class="line">from heapq import *</span><br><span class="line"></span><br><span class="line">heap=[]</span><br><span class="line">heappush(heap, 1)</span><br><span class="line">heappop(heap) # 0</span><br><span class="line">print(len(heap)) # 堆大小 </span><br><span class="line">print(heap[0]) # 栈顶最小元素</span><br><span class="line">//将列表转换为堆</span><br><span class="line">heap2 = [5, 8, 0, 4, 6, 7]</span><br><span class="line">heapify(heap2)</span><br><span class="line">print(heap2)   #[0, 4, 5, 8, 6, 7]</span><br><span class="line"></span><br><span class="line">//前n个最大的或前n个最小的元素</span><br><span class="line">lst = [5, 8, 0, 4, 6, 7]</span><br><span class="line">print(nsmallest(3, lst))</span><br><span class="line">print(nlargest(3, lst))</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>python 字典（哈希表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict=&#123;&#125;</span><br><span class="line"></span><br><span class="line">dict[&#x27;Age&#x27;]=18</span><br></pre></td></tr></table></figure>
</li>
<li><p>python 数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr=[]</span><br><span class="line"></span><br><span class="line">arr.push(3)</span><br><span class="line">arr.pop()</span><br><span class="line">arr.pop(0) //删除第一个元素</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>python 字符串</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;sadfasdf,asdfa&#x27;</span><br><span class="line"></span><br><span class="line">s.split(&#x27;,&#x27;)</span><br></pre></td></tr></table></figure>
<ol start="11">
<li><p>python 设定最大值最小值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.maxsize python3中设置最大值</span><br><span class="line">-sys.maxsize-1 python3中设置最小值</span><br></pre></td></tr></table></figure></li>
<li><p>输入字符转换为ASCII码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(ch)</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入ASCII码转换为字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chr(ch)</span><br></pre></td></tr></table></figure>
</li>
<li><p>str.find(s, beg, end)<br><a href="https://www.runoob.com/python/att-string-find.html">https://www.runoob.com/python/att-string-find.html</a></p>
</li>
<li><p>定义二维数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp = [[0] * (n + 1) for _ in range(m + 1)] #尽量用这个</span><br><span class="line">dp2=[[0]*(n+1)]*(m+1) #这个有时会导致出错</span><br><span class="line">print(dp==dp2) # True</span><br></pre></td></tr></table></figure></li>
<li><p>遍历哈希表</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for k in h.keys():</span><br><span class="line">            print(k)</span><br></pre></td></tr></table></figure>

<ol start="17">
<li><p>遍历枚举类型数组</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i,num in enumerate(nums):</span><br><span class="line">    print(i,num)</span><br></pre></td></tr></table></figure>
</li>
<li><p>abs()</p>
</li>
<li><p>split()</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;sdf,asdfa&#x27;</span><br><span class="line"></span><br><span class="line">arr=s.split(&#x27;,&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="20">
<li>strip()</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.strip() # 去掉空格</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="21">
<li><p>range(start, stop, step)</p>
</li>
<li><p>数组添加可以不用append,直接+</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2]+[3]=[2,3]</span><br></pre></td></tr></table></figure>

<ol start="23">
<li>左移乘2、右移除2</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;1 </span><br><span class="line">&gt;&gt;1</span><br></pre></td></tr></table></figure>

<ol start="24">
<li>&amp; 和 and     |和or是不同的</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;   二进制与运算</span><br><span class="line">and 与运算</span><br><span class="line">|   二进制或运算</span><br><span class="line">or  或运算</span><br></pre></td></tr></table></figure>

<ol start="25">
<li>set()函数</li>
</ol>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">visited=<span class="built_in">set</span>()</span><br><span class="line">visited.add(<span class="number">3</span>)</span><br><span class="line">visited.add(<span class="number">3</span>) <span class="comment">#重复元素会被删除</span></span><br></pre></td></tr></table></figure>
<ol start="26">
<li>双端队列 deque()   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">q=collections.deque()</span><br><span class="line">q.push(<span class="number">3</span>)</span><br><span class="line">q.push(<span class="number">4</span>)</span><br><span class="line">q.popleft()</span><br><span class="line">q.pop()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>import queue</li>
</ol>
<p>deque&#x3D;queue.deque()<br>queue&#x3D;queue.Queue()</p>
<ol start="28">
<li>join拼接字符串</li>
</ol>
<p>res&#x3D;[‘sdf’, ‘sdf’, ‘d’]<br>str&#x3D;’  ‘.join(res) # ‘sdfsdfd’</p>
<ol start="29">
<li>arr.sort()</li>
</ol>
<h2 id="JS常用模块"><a href="#JS常用模块" class="headerlink" title="JS常用模块"></a>JS常用模块</h2><ol>
<li><p>哈希表</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map=<span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>) </span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">//2</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&#x27;b&#x27;</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">of</span> <span class="attr">map</span>:</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">v, k</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(v, k)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>s&#x3D;new Set() # 集合里没有重复元素</p>
<p>s.add(3)</p>
<p>s.has(3)</p>
</li>
<li><p>字符串转ascii</p>
</li>
<li><p>dp&#x3D;new Array(n).fill(0)</p>
</li>
<li><p>arr.length</p>
</li>
<li><p>arr.push(0)和arr.unshift(0)</p>
</li>
<li><p>queue.shift()和queue.pop()</p>
</li>
<li><p>let dp&#x3D;Array.from(new Array(n), ()&#x3D;&gt;new Array(2))</p>
</li>
<li><p>res&#x3D;-Infinity</p>
</li>
<li><p>stack[stack.length-1] #栈顶元素</p>
</li>
<li><p>String(3) #字符串转换</p>
</li>
</ol>
<h2 id="刷题心得"><a href="#刷题心得" class="headerlink" title="刷题心得"></a>刷题心得</h2><p>看到有序就要想到双指针、中序递增</p>
<p>二叉树一般用递归</p>
<p>字符串问题用枚举</p>
<p>滑动窗口用双指针优化</p>
<p>前序，中序，后序都可以看作是<a href="https://so.csdn.net/so/search?q=DFS&spm=1001.2101.3001.7020">DFS</a>，用栈实现，因为他们都是在找到叶子节点前一直遍历。<br>层序<a href="https://so.csdn.net/so/search?q=%E9%81%8D%E5%8E%86&spm=1001.2101.3001.7020">遍历</a>属于BFS，用堆实现，因为它们是一层一层遍历。</p>
<h2 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h2><p>算法动画：<a href="https://github.com/MisterBooo/Article">https://github.com/MisterBooo/Article</a><br>涉及算法：冒泡、插入、选择排序、快速排序、堆排序、荷兰国旗问题、小范围排序练习题、计数排序、基数排序、比较器<br>快速排序(快速选择算法)：<a href="https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ">https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ</a><br><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">#215 数组中的第K个最大元素</a>——1&#x2F;小根堆的方法——2&#x2F;快速选择的方法<br><a href="https://leetcode-cn.com/problems/sort-colors/">#75 颜色分类</a>——快排法——计数排序法——双指针法<br><a href="https://leetcode-cn.com/problems/0H97ZC/">#剑指 Offer II 075 数组相对排序</a>——哈希表，计数<br><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/">剑指 Offer 50. 第一个只出现一次的字符</a>——哈希表<br><a href="https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/">剑指 Offer 45. 把数组排成最小的数</a>——冒泡排序</p>
<h2 id="数组问题"><a href="#数组问题" class="headerlink" title="数组问题"></a>数组问题</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/19/24/">https://labuladong.gitee.io/algo/2/19/24/</a><br><a href="https://leetcode-cn.com/problems/rotate-image/">#48 旋转图像</a><br><a href="https://leetcode-cn.com/problems/spiral-matrix/">#54 螺旋矩阵</a><br><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">#59 螺旋矩阵 II</a><br><a href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/">剑指 Offer 29. 顺时针打印矩阵</a>——设定边界<br>算法技巧：<a href="https://labuladong.github.io/algo/2/18/21/">https://labuladong.github.io/algo/2/18/21/</a><br><a href="https://leetcode-cn.com/problems/range-sum-query-immutable/">303. 区域和检索 - 数组不可变</a>——前缀和<br><a href="https://leetcode-cn.com/problems/range-sum-query-2d-immutable/">304. 二维区域和检索 - 矩阵不可变</a>——二维前缀和<br><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于</a>——双指针——哈希表——原地数组会超时<br><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a>——二叉搜索树——暴力for循环</p>
<h2 id="栈、单调栈"><a href="#栈、单调栈" class="headerlink" title="栈、单调栈"></a>栈、单调栈</h2><p><a href="https://labuladong.github.io/algo/2/21/60/">https://labuladong.github.io/algo/2/21/60/</a><br><a href="https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a>——每次删除元素时，如果stack2不为空，直接删除栈顶元素，否则将stack1中所有元素push到stack2，再进行pop操作<br><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a>——单调栈(保存索引)<br><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503. 下一个更大元素 II</a>——单调栈(不用构造新数组，用循环数组技巧)<br><a href="https://leetcode.cn/problems/min-stack/">155. 最小栈</a>——辅助栈<br><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a>——辅助栈<br><a href="https://leetcode.cn/problems/zhan-de-ya-ru-dan-chu-xu-lie-lcof/">剑指 Offer 31. 栈的压入、弹出序列</a>—— 在push时每次检查 pushed数组遍历到的当前元素&#x3D;&#x3D;popped栈顶元素，相等就移动指针<br><a href="https://leetcode.cn/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a>——维护一个最小值的栈</p>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p><a href="https://leetcode.cn/problems/contains-duplicate/">217. 存在重复元素</a>——哈希表</p>
<h2 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/18/">https://labuladong.gitee.io/algo/2/18/</a><br><a href="https://leetcode-cn.com/problems/rotate-list/">#61 旋转链表</a><br><a href="https://leetcode.cn/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a><br><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指 Offer 35. 复杂链表的复制</a>——哈希表</p>
<h3 id="链表问题（双指针技巧）"><a href="#链表问题（双指针技巧）" class="headerlink" title="链表问题（双指针技巧）"></a>链表问题（双指针技巧）</h3><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/18/17/">https://labuladong.gitee.io/algo/2/18/17/</a><br><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/"> #21 合并两个有序链表</a>——新链表迭代法，双指针——递归法<br><a href="https://leetcode.cn/problems/he-bing-liang-ge-pai-xu-de-lian-biao-lcof/">剑指 Offer 25. 合并两个排序的链表</a>——类似于归并排序<br><a href="https://leetcode-cn.com/problems/linked-list-cycle/">#141 环形链表</a><br><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">#142 环形链表 II</a>——快慢指针<br><a href='https://blog.csdn.net/weixin_40323516/article/details/121938354'>打印两个有序链表的公共部分</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">#160 相交链表</a>——哈希表—— 双指针 ab链表相连——快慢指针 长链先走几步<br><a href="https://leetcode-cn.com/problems/7WHec2/">#剑指 Offer II 077 链表排序</a>——归并排序 快慢指针分成两条链<br><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">#876 链表的中间结点</a>——快慢指针<br><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">#19 删除链表的倒数第 N 个结点</a>—— 快慢指针——常规解法：先得到链表长度然后顺序遍历length-n次找到删除的节点<br><a href="https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a>——双指针——哈希表</p>
<h3 id="链表问题（递归翻转链表的一部分）"><a href="#链表问题（递归翻转链表的一部分）" class="headerlink" title="链表问题（递归翻转链表的一部分）"></a>链表问题（递归翻转链表的一部分）</h3><p>算法技巧：</p>
<ul>
<li><a href="https://labuladong.gitee.io/algo/2/18/20/">https://labuladong.gitee.io/algo/2/18/20/</a></li>
<li><a href="https://labuladong.gitee.io/algo/2/18/19/">https://labuladong.gitee.io/algo/2/18/19/</a><br><a href="https://leetcode-cn.com/problems/palindrome-linked-list/"> #234 回文链表</a>——快慢指针<br><a href="https://leetcode-cn.com/problems/reverse-linked-list/">#206 反转链表</a>—— 常规解法—— 递归<br><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">#92 反转链表 II</a>—— 常规解法：截断之后，子链表反转，再拼接——递归<br><a href="https://leetcode.cn/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a>——反转链表——递归——调用栈<br><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">剑指 Offer 24. 反转链表</a>——递归——迭代</li>
</ul>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>算法技巧：<br><a href="https://leetcode-cn.com/problems/binary-search/">#704 二分查找</a><br><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a><br><a href="https://leetcode-cn.com/problems/first-bad-version/">#278 第一个错误的版本</a><br><a href="https://leetcode-cn.com/problems/search-insert-position/">#35 搜索插入位置</a><br><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指 Offer 11. 旋转数组的最小数字</a>——二分查找——暴力遍历<br><a href="https://leetcode.cn/problems/binary-search/">704. 二分查找</a><br><a href="https://leetcode.cn/problems/first-bad-version/">278. 第一个错误的版本</a><br><a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置</a></p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/4/31/116/">https://labuladong.gitee.io/algo/4/31/116/</a><br><a href="https://leetcode-cn.com/problems/single-number/">#136 只出现一次的数字</a><br><a href="https://leetcode-cn.com/problems/missing-number/">#268 丢失的数字</a><br><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/"> #剑指 Offer 56 - I 数组中数字出现的次数</a><br><a href="https://leetcode-cn.com/problems/number-of-1-bits/">#191 位1的个数</a><br><a href="https://leetcode.cn/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中1的个数</a>——除基取余——位运算<br><a href="https://leetcode-cn.com/problems/power-of-two/">#231 2 的幂</a><br><a href="https://leetcode-cn.com/problems/set-mismatch/">#645 错误的集合</a><br><a href="https://leetcode.cn/problems/qiu-12n-lcof/">剑指 Offer 64. 求1+2+…+n</a>——递归——计算内存——快速乘（位运算）<br><a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/">剑指 Offer 56 - II. 数组中数字出现的次数 II</a>——位运算——哈希表<br><a href="https://leetcode.cn/problems/power-of-two/">231. 2 的幂</a>——右移位<br><a href="https://leetcode.cn/problems/number-of-1-bits/">191. 位1的个数</a><br><a href="https://leetcode.cn/problems/reverse-bits/">190. 颠倒二进制位</a>——移位<br><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a>——异或</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/19/26/">https://labuladong.gitee.io/algo/2/19/26/</a><br><a href="https://leetcode-cn.com/problems/merge-sorted-array/">#88 合并两个有序数组</a><br><a href="https://leetcode-cn.com/problems/sort-an-array/">#912 排序数组</a><br><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">#315 计算右侧小于当前元素的个数</a></p>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p><a href="https://leetcode.cn/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a>——快速幂</p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树中最难的题：树形DP<br>算法技巧：二叉树很多问题可以用树形DP套路去解</p>
<h3 id="递归和非递归的方法实现二叉树的前序，中序，后序遍历"><a href="#递归和非递归的方法实现二叉树的前序，中序，后序遍历" class="headerlink" title="递归和非递归的方法实现二叉树的前序，中序，后序遍历"></a>递归和非递归的方法实现二叉树的前序，中序，后序遍历</h3><p><a href="https://segmentfault.com/a/1190000016674584">递归和非递归的方法实现二叉树的前序，中序，后序遍历</a><br>总结：二叉树的题都可以用递归或迭代两种方法解决<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">#144 二叉树的前序遍历</a><br><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">#94 二叉树的中序遍历</a><br><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a>——层序遍历 双端队列（借助队列先进先出的特性）<br><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a>——双端队列<br><a href="https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/">剑指 Offer 32 - II. 从上到下打印二叉树 II</a>——层序遍历 BFS 双端队列<br><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/">剑指 Offer 55 - II. 平衡二叉树</a>——自底向上，判断左右子树是否是平衡二叉树并且左子树高度和右子树高度相差不大于1</p>
<h3 id="二叉树的递归套路"><a href="#二叉树的递归套路" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h3><p>判断是否搜索二叉树（BST）——中序递增<br>判断是否完全二叉树——有右无左false——宽度优先遍历<br>判断是否满二叉树——节点个数和最大深度要满足一个公式<br>判断是否平衡二叉树——左右子树高度差不超过1</p>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a><br><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">#104 二叉树的最大深度</a>—— 递归—— 回溯<br><a href="https://leetcode.cn/problems/er-cha-shu-de-shen-du-lcof/">剑指 Offer 55 - I. 二叉树的深度</a>——DFS<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/"> #144 二叉树的前序遍历</a>——递归——回溯<br><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">#543 二叉树的直径</a>——递归——回溯<br><a href="https://leetcode-cn.com/problems/invert-binary-tree/">#226 翻转二叉树</a><br><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/"> #116 填充每个节点的下一个右侧节点指</a>——遍历三叉树<br><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/"> #114 二叉树展开为链表</a><br><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">703 数据流中的第 K 大元素</a>——小根堆<br><a href="https://leetcode-cn.com/problems/same-tree">100. 相同的树</a>——递归 遍历<br><a href="https://leetcode-cn.com/problems/symmetric-tree">101. 对称二叉树</a><br><a href="https://leetcode.cn/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a>——递归（判断两节点 L.left和 R.right是否相等且L.right 和 R.left是否相等，不相等返回False）<br><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes">222. 完全二叉树的节点个数</a><br><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/">剑指 Offer 12. 矩阵中的路径</a>——回溯<br><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a>——递归<br><a href='https://www.nowcoder.com/questionTerminal/430180b66a7547e1963b69b1d0efbd3c'>折纸问题</a>——二叉树的中序遍历<br><a href="https://leetcode.cn/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指 Offer 34. 二叉树中和为某一值的路</a>——DFS<br><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">剑指 Offer 36. 二叉搜索树与双向链表</a>——中序递增dfs</p>
<h3 id="二叉树（序列化）"><a href="#二叉树（序列化）" class="headerlink" title="二叉树（序列化）"></a>二叉树（序列化）</h3><p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree">297. 二叉树的序列化与反序列化</a></p>
<h3 id="二叉树（后序）"><a href="#二叉树（后序）" class="headerlink" title="二叉树（后序）"></a>二叉树（后序）</h3><p><a href="https://leetcode-cn.com/problems/find-duplicate-subtrees">652. 寻找重复的子树</a></p>
<p>(未做)<a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator">341. 扁平化嵌套列表迭代器</a></p>
<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a><br><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a><br><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></p>
<h3 id="二叉树（构造）"><a href="#二叉树（构造）" class="headerlink" title="二叉树（构造）"></a>二叉树（构造）</h3><p><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">654. 最大二叉树</a><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a><br><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a>——递归（这题背吧）<br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a><br><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></p>
<h6 id="二叉树对称性"><a href="#二叉树对称性" class="headerlink" title="二叉树对称性"></a>二叉树对称性</h6><ol start="100">
<li>相同的树</li>
<li>翻转二叉树</li>
<li>二叉树的最大深度</li>
<li>平衡二叉树</li>
<li>二叉树的直径<br><a href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></li>
<li>另一个树的子树——结合相同的树的代码编写</li>
<li>单值二叉树<br><a href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a><br><a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></li>
</ol>
<h3 id="BST（二叉搜索树）"><a href="#BST（二叉搜索树）" class="headerlink" title="BST（二叉搜索树）"></a>BST（二叉搜索树）</h3><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/20/41/">https://labuladong.gitee.io/algo/2/20/41/</a></p>
<h4 id="二叉搜索树（基本操作）"><a href="#二叉搜索树（基本操作）" class="headerlink" title="二叉搜索树（基本操作）"></a>二叉搜索树（基本操作）</h4><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">删除二叉搜索树中的节点</a>——递归（分三种情况删除节点）<br><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">#98 验证二叉搜索树</a>——递归法：满足 min.val &lt; root.val &lt; max.val 则是二叉搜索树<br><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">#700 二叉搜索树中的搜索</a><br><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">#701 二叉搜索树中的插入操作</a><br><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/">剑指 Offer 68 - I. 二叉搜索树的最近公共祖</a>——根据二叉搜索树的性质递归<br><a href="https://leetcode.cn/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/">剑指 Offer 68 - II. 二叉树的最近公共祖先</a>——先序遍历 DFS<br><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/">剑指 Offer 33. 二叉搜索树的后序遍历序列</a>——递归。找到第一个大于根节点的值，该值作为二叉树分界点</p>
<h4 id="二叉搜索树（中序遍历）"><a href="#二叉搜索树（中序遍历）" class="headerlink" title="二叉搜索树（中序遍历）"></a>二叉搜索树（中序遍历）</h4><p><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst">230. 二叉搜索树中第K小的元素</a>——思路：中序递增<br><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第k大节点</a>——中序递增(遍历到第k大元素时就停止遍历）</p>
<ul>
<li><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">#94 二叉树的中序遍历</a></li>
<li><a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/">671. 二叉树中第二小的节点</a></li>
</ul>
<p><a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree">538. 把二叉搜索树转换为累加树</a>——中序递减<br><a href="https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree">1038. 把二叉搜索树转换为累加树</a>——同上</p>
<h3 id="二叉搜索树（构造）"><a href="#二叉搜索树（构造）" class="headerlink" title="二叉搜索树（构造）"></a>二叉搜索树（构造）</h3><p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees">96. 不同的二叉搜索树</a>——动态规划——递归分解问题<br><a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii">（未做）95. 不同的二叉搜索树 II</a></p>
<h3 id="二叉树（Git原理）"><a href="#二叉树（Git原理）" class="headerlink" title="二叉树（Git原理）"></a>二叉树（Git原理）</h3><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/">1644. 二叉树的最近公共祖先 II</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. 二叉树的最近公共祖先 III</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/">1676. 二叉树的最近公共祖先 IV</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>509 斐波那契数列<br>322 零钱兑换<br>377 组合总和<br><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a><br>746 <a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/description/">使用最小花费爬楼梯</a><br>1137 第n个泰波那契数<br><a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a><br><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484?tpId=295&fromPut=pc_wzcpa_labuladong_sf">最大子数组和</a><br><a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a>——DP（滚动数组）<br><a href="https://leetcode-cn.com/problems/chou-shu-lcof">剑指 Offer 49. 丑数</a>——动态规划，三指针<br><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a><br><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a><br><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a><br><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a><br><a href="https://leetcode.cn/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/">剑指 Offer 46. 把数字翻译成字符串</a>——DP(滚动数组优化DP)</p>
<h6 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h6><p>算法技巧：<a href="https://labuladong.github.io/algo/3/26/96/">https://labuladong.github.io/algo/3/26/96/</a><br>121<br>122<br>309<br>714<br><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/">剑指 Offer 63. 股票的最大利润</a></p>
<h6 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h6><p><a href="https://labuladong.github.io/algo/3/26/93/">https://labuladong.github.io/algo/3/26/93/</a><br><a href="https://leetcode-cn.com/problems/house-robber">198. 打家劫舍（简单）</a><br><a href="https://leetcode-cn.com/problems/house-robber-ii">213. 打家劫舍II（中等）</a><br><a href="https://leetcode-cn.com/problems/house-robber-iii">337. 打家劫舍III（中等）</a></p>
<h6 id="路径最小"><a href="#路径最小" class="headerlink" title="路径最小"></a>路径最小</h6><p><a href="https://labuladong.github.io/algo/3/26/86/">https://labuladong.github.io/algo/3/26/86/</a><br><a href="https://leetcode-cn.com/problems/minimum-path-sum/">64. 最小路径和</a><br><a href="https://leetcode-cn.com/problems/minimum-falling-path-sum/">931. 下降路径最小和</a><br><a href="https://leetcode-cn.com/problems/li-wu-de-zui-da-jie-zhi-lcof/">剑指 Offer 47. 礼物的最大价值</a></p>
<h6 id="字符串匹配、KMP"><a href="#字符串匹配、KMP" class="headerlink" title="字符串匹配、KMP"></a>字符串匹配、KMP</h6><p><a href="https://labuladong.github.io/algo/3/26/97/">https://labuladong.github.io/algo/3/26/97/</a><br><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a><br><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. 重复的子字符串</a></p>
<h6 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h6><p><a href="https://labuladong.github.io/algo/3/24/79/">https://labuladong.github.io/algo/3/24/79/</a><br><a href="https://labuladong.github.io/algo/3/24/80/">https://labuladong.github.io/algo/3/24/80/</a><br>最长递增子序列<br><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a><br><a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/">583. 两个字符串的删除操作</a><br><a href="https://leetcode-cn.com/problems/minimum-ascii-delete-sum-for-two-strings/">712. 两个字符串的最小ASCII删除和</a><br><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">516. 最长回文子序列</a></p>
<h6 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h6><p><a href="https://labuladong.github.io/algo/3/25/82/">https://labuladong.github.io/algo/3/25/82/</a><br><a href="https://labuladong.github.io/algo/3/25/84/">https://labuladong.github.io/algo/3/25/84/</a><br><a href="https://labuladong.github.io/algo/3/25/83/">https://labuladong.github.io/algo/3/25/83/</a><br><a href="https://leetcode-cn.com/problems/coin-change-2/">518. 零钱兑换 II</a><br><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a></p>
<h6 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h6><p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/">剑指 Offer 03. 数组中重复的数字</a>——原地数组当哈希（优化空间复杂度）<br><a href="https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/">442. 数组中重复的数据</a>——原地数组当哈希（优化空间复杂度）<br><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半</a>——摩尔投票<br><a href="https://leetcode-cn.com/problems/majority-element-ii/">求众数 II</a>——摩尔投票</p>
<h6 id="leetcode周赛"><a href="#leetcode周赛" class="headerlink" title="leetcode周赛"></a>leetcode周赛</h6><ol start="6056">
<li>字符串中最大的 3 位相同数字</li>
</ol>
<h6 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h6><p><a href="https://leetcode-cn.com/problems/jump-game/">55. 跳跃游戏</a>——贪心<br><a href="https://leetcode-cn.com/problems/jump-game-ii/">45. 跳跃游戏 II</a>——贪心<br><a href="https://leetcode.cn/problems/jian-sheng-zi-ii-lcof/">剑指 Offer 14- II. 剪绳子 II</a>——贪心<br><a href="https://leetcode.cn/problems/dui-lie-de-zui-da-zhi-lcof/">剑指 Offer 59 - II. 队列的最大值</a>——双端队列维护最大值</p>
<p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a>——小根堆<br><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></p>
<h6 id="快慢指针-x2F-双指针"><a href="#快慢指针-x2F-双指针" class="headerlink" title="快慢指针&#x2F;双指针"></a>快慢指针&#x2F;双指针</h6><p>只要数组有序，就应该想到双指针技巧<br><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a>——快慢指针原地数组修改<br><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a>——快慢指针<br><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a><br><a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a><br><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167. 两数之和 II - 输入有序数组</a>——双指针<br><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串</a>——双指针（从中间往两边扩散）<br><a href="https://leetcode.cn/problems/he-wei-sde-liang-ge-shu-zi-lcof/">剑指 Offer 57. 和为s的两个数字</a>——双指针（相向而行）<br><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a><br><a href="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a>——原地翻转两次数组——用额外数组<br><a href="https://leetcode.cn/problems/reverse-words-in-a-string-iii/">#557 反转字符串中的单词 III</a><br><a href="https://leetcode.cn/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/">剑指 Offer 22. 链表中倒数第k个节点</a>——双指针——遍历<br><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点</a>——快慢指针（快指针走两步 慢指针走一步）——数组——单指针遍历<br><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a>——快慢指针（快指针先走n步）——单指针遍历<br><a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/">剑指 Offer 57 - II. 和为s的连续正数序列</a>——暴力枚举——双指针优化暴力枚举（区间求和公式：（l+r）*(r-l+1)&#x2F;2）<br><a href="https://leetcode.cn/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a>——双指针——分割拼接</p>
<h6 id="旋转字符串或数组或链表"><a href="#旋转字符串或数组或链表" class="headerlink" title="旋转字符串或数组或链表"></a>旋转字符串或数组或链表</h6><p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a>——分片 两个字符串切片——列表遍历拼接<br><a href="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a>——原地翻转两次数组——用额外数组</p>
<h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p><a href="https://leetcode.cn/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/">剑指 Offer 17. 打印从1到最大的n位数</a>——字符串递归排列组合——暴力解法<br><a href="https://leetcode.cn/problems/biao-shi-shu-zhi-de-zi-fu-chuan-lcof/">剑指 Offer 20. 表示数值的字符串</a>——模拟逐步换算<br><a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/">剑指 Offer 67. 把字符串转换成整数</a>——模拟逐步换算<br><a href="https://leetcode.cn/problems/zi-fu-chuan-de-pai-lie-lcof/">剑指 Offer 38. 字符串的排列</a>——回溯</p>
<h6 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h6><p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a>——滑动窗口(用window数组保存出现的数的次数)<br><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/">剑指 Offer 48. 最长不含重复字符的子字</a>——滑动窗口(用window数组保存出现的数的次数)<br><a href="https://leetcode.cn/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a>——双端队列 单调栈 维护一个最大值队列，队首为最大值</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://leetcode.cn/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/">剑指 Offer 44. 数字序列中某一位的数字</a>——迭代<br><a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字</a>——约瑟夫环问题<br><a href="https://leetcode.cn/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/">剑指 Offer 41. 数据流中的中位数</a>——大顶堆保存较小一半数据 小顶堆保存较大的一半数据<br><a href="https://leetcode.cn/problems/1nzheng-shu-zhong-1chu-xian-de-ci-shu-lcof/">剑指 Offer 43. 1～n 整数中 1 出现的次数</a>——数位dp<br><a href="https://leetcode.cn/problems/maximum-subarray/">53. 最大子数组和</a>——分治——动规<br><a href="https://leetcode.cn/problems/maximum-product-subarray/">152. 乘积最大子数组</a>——动态规划，多保存一个最小值<br><a href="https://leetcode.cn/problems/degree-of-an-array/">697. 数组的度</a>——三个哈希表，分别保存某个数字出现的次数某个数字最开始出现的位置，某个数字最后出现的位置<br><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></p>
<p><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a><br><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯</a><br><a href="https://leetcode.cn/problems/fibonacci-number/">509. 斐波那契数</a><br><a href="https://leetcode.cn/problems/n-th-tribonacci-number/">1137. 第 N 个泰波那契数</a><br><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p>
<h2 id="括号的合法性判断问题"><a href="#括号的合法性判断问题" class="headerlink" title="括号的合法性判断问题"></a>括号的合法性判断问题</h2><p><a href="https://labuladong.github.io/algo/4/31/129/">https://labuladong.github.io/algo/4/31/129/</a></p>
<p><a href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a>——栈<br><a href="https://leetcode.cn/problems/minimum-insertions-to-balance-a-parentheses-string/">1541. 平衡括号字符串的最少插入次数</a>——一个变量need记录需要右括号的数量，一个变量res表示的是左右括号总的插入数量<br><a href="https://leetcode.cn/problems/minimum-add-to-make-parentheses-valid/">921. 使括号有效的最少添加</a>——一个变量need记录需要右括号的数量，一个变量res表示的是左右括号总的插入数量<br><a href="https://leetcode.cn/problems/check-if-word-is-valid-after-substitutions/">1003. 检查替换后的词是否有效</a>——栈</p>
<h2 id="回溯解决各种排列组合问题"><a href="#回溯解决各种排列组合问题" class="headerlink" title="回溯解决各种排列组合问题"></a>回溯解决各种排列组合问题</h2><p><a href="https://labuladong.github.io/algo/4/29/103/">https://labuladong.github.io/algo/4/29/103/</a><br><a href="https://labuladong.github.io/algo/4/29/105/">https://labuladong.github.io/algo/4/29/105/</a></p>
<p><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a><br><a href="https://leetcode.cn/problems/subsets/">78. 子集</a><br><a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a><br><a href="https://leetcode.cn/problems/combinations/">77. 组合</a><br><a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a><br><a href="https://leetcode.cn/problems/permutations/">46. 全排列</a><br><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a><br><a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a><br><a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></p>
<h1 id="6-1-BFS问题"><a href="#6-1-BFS问题" class="headerlink" title="6.1 BFS问题"></a>6.1 BFS问题</h1><p>DFS就是递归调用，BFS就是用一个双端队列实现<br><a href="https://leetcode.cn/problems/xu-lie-hua-er-cha-shu-lcof/">剑指 Offer 37. 序列化二叉树</a>——BFS<br><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a><br><a href="https://leetcode.cn/problems/number-of-islands/">200. 岛屿数量</a><br><a href="https://leetcode.cn/problems/surrounded-regions/">130. 被围绕的区域</a>——DFS<br><a href="https://leetcode.cn/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a>——BFS，while for两层控制<br><a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/">674. 最长连续递增序列</a></p>
<h1 id="AcWing"><a href="#AcWing" class="headerlink" title="AcWing"></a>AcWing</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的k个数</a>——快排（左右哨兵、递归左右子树组）<br><a href="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a>——双指针——快速排序</p>
<p>快速排序：<a href="https://www.acwing.com/video/227/">https://www.acwing.com/video/227/</a></p>
<p>快速排序过程：1. 确定分界点 2. 调整区间 3. 递归处理左右两端</p>
<p>调整区间：<br>法1：双指针相向而行，交换<br>法2：用两个数组保存大于目标值和小于目标值的数</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">quick_sort</span>(<span class="params">arr: <span class="built_in">number</span>[], l:<span class="built_in">number</span>, r:<span class="built_in">number</span></span>):<span class="built_in">number</span>[]&#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">pivot</span>:<span class="built_in">number</span>=arr[l]<span class="comment">//基准值为第一个数</span></span><br><span class="line">      <span class="keyword">let</span> i=l</span><br><span class="line">      <span class="keyword">let</span> j=r</span><br><span class="line">      <span class="keyword">if</span>(r&lt;l) <span class="keyword">return</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">          <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j]&gt;=pivot)   j-- <span class="comment">//注意这里j的循环要放i前面</span></span><br><span class="line">          <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i]&lt;=pivot)   i++</span><br><span class="line">          <span class="title function_">swap</span>(arr, i, j)<span class="comment">//交换</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="title function_">swap</span>(arr, i, l)<span class="comment">// 基准值归位</span></span><br><span class="line">      <span class="title function_">quick_sort</span>(arr, l, i-<span class="number">1</span>)</span><br><span class="line">      <span class="title function_">quick_sort</span>(arr, i+<span class="number">1</span>, r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> arr<span class="comment">//返回基准值位置</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">swap</span>(<span class="params">arr, i, j</span>)&#123;</span><br><span class="line">      <span class="keyword">let</span> tmp=arr[i]</span><br><span class="line">      arr[i]=arr[j]</span><br><span class="line">      arr[j]=tmp</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">let</span> ans=<span class="title function_">quick_sort</span>(nums, <span class="number">0</span>, nums.<span class="property">length</span>-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>









<h2 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h2><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><p><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">剑指 Offer 51. 数组中的逆序对</a>——归并，合并阶段统计逆序数</p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Git命令</title>
    <url>/2022/03/13/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一些常用的git命令方便查阅</p>
<span id="more"></span>

<p>git add .<br>git commit -m ‘[文字]’<br>git push 从本地推送代码到远程<br>git pull 从远程拉取代码到本地<br>git checkout [分支名] 切换到某个分支<br>git branch 查看当前分支<br>git merge [分支名] 合并分支<br>git stash：存储临时代码。<br>git reset –soft：软回溯，回退 commit 的同时保留修改内容。<br>git cherry-pick：复制 commit。<br>git revert：撤销 commit 的修改内容。<br>git reflog：记录了 commit 的历史操作。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>书籍阅读</title>
    <url>/2022/03/22/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>你不知道的js<br>阅读笔记：<a href='https://github.com/bailinlin/Awsome-Front-End-Xmind'>Awsome-Front-End-Xmind</a></p>
]]></content>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建Hexo+GitHubPages博客</title>
    <url>/2022/03/07/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo-GitHubPages%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>无需购买域名、配置服务器，只需要一个github账号即可搭建个人博客</p>
<span id="more"></span>

<h2 id="安装git和Node"><a href="#安装git和Node" class="headerlink" title="安装git和Node"></a>安装git和Node</h2><h2 id="安装并启动Hexo"><a href="#安装并启动Hexo" class="headerlink" title="安装并启动Hexo"></a>安装并启动Hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v </span><br><span class="line">hexo init mona_blog</span><br><span class="line">cd mona_blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new first_blog</span><br><span class="line">hexo generate 简写　hexo g</span><br><span class="line">hexo server　简写 hexo s</span><br><span class="line">hexo deploy　简写 hexo d</span><br></pre></td></tr></table></figure>

<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ol>
<li>修改_config.yml文件：修改并添加type repo branch的值，示例如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/monaaaaaa2544/monaaaaaa2544.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装hexo-deployer-git插件，运行<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>重新运行<code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p>
</li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol>
<li><p>安装NextT主题 <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>这是将Next主题下载到blog目录的themes主题下的next文件夹中。</p>
</li>
<li><p>打开站点的_config.yml配置文件，修改主题为next</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开themes下的_config.yml文件，找到Scheme Settings，Next有4种主题可选，选一个取消注释即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载插件<code>npm i hexo-renderer-swig</code><br>这里由于Hexo升级的问题，必须下载swig渲染插件</p>
</li>
<li><p>重新运行<code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p>
</li>
</ol>
<h2 id="Hexo-命令总结"><a href="#Hexo-命令总结" class="headerlink" title="Hexo 命令总结"></a>Hexo 命令总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d </span><br><span class="line">hexo s  </span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<h2 id="NexT配置"><a href="#NexT配置" class="headerlink" title="NexT配置"></a>NexT配置</h2><ol>
<li>浏览页面显示当前浏览进度<br>找到_config.yml中的关键字scrollpercent, 设置为true</li>
<li>本地搜索功能</li>
</ol>
<ul>
<li>安装插件<code>npm install hexo-generator-searchdb --save</code></li>
<li>添加如下配置到_config.yml中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>修改如下参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="博客添加音乐"><a href="#博客添加音乐" class="headerlink" title="博客添加音乐"></a>博客添加音乐</h2><p>使用MeingJS<br>具体可查阅：<a href='https://blog.csdn.net/weixin_43471926/article/details/109798928'> Hexo-Fluid主题添加音乐页面</a><br><a href='https://mackvord.github.io/aplayer-dplayer/547187035.html'>Aplayer &amp; Dplayer 嵌入音频和视频</a></p>
<h2 id="Hexo博客Next主题添加统计文章阅读量、评论等功能"><a href="#Hexo博客Next主题添加统计文章阅读量、评论等功能" class="headerlink" title="Hexo博客Next主题添加统计文章阅读量、评论等功能"></a>Hexo博客Next主题添加统计文章阅读量、评论等功能</h2><p><a href="https://blog.csdn.net/qq_32566003/article/details/116564864">如何为next主题添加不蒜子统计</a><br><a href='https://blog.csdn.net/Time888/article/details/74203939?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3'>为NexT主题添加文章阅读量统计功能</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href='https://zhuanlan.zhihu.com/p/26625249'>GitHub+Hexo 搭建个人网站详细教程</a><br><a href='https://mackvord.github.io/aplayer-dplayer/547187035.html'>Aplayer &amp; Dplayer 嵌入音频和视频</a><br><a href='https://blog.csdn.net/as480133937/article/details/100138838'>Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>科研信息</title>
    <url>/2022/03/20/%E7%A7%91%E7%A0%94%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>做科研相关资料</p>
<span id="more"></span>

<h2 id="Hierarchical-Visual-Concept-Interpretation-for-Medical-Image-Classification"><a href="#Hierarchical-Visual-Concept-Interpretation-for-Medical-Image-Classification" class="headerlink" title="Hierarchical Visual Concept Interpretation for Medical Image Classification"></a>Hierarchical Visual Concept Interpretation for Medical Image Classification</h2><h2 id="Smooth-Adversarial-Training"><a href="#Smooth-Adversarial-Training" class="headerlink" title="Smooth Adversarial Training"></a>Smooth Adversarial Training</h2><p>同时提高Acc和鲁棒性</p>
<h2 id="Generate-Natural-Adversarial-Examples"><a href="#Generate-Natural-Adversarial-Examples" class="headerlink" title="Generate Natural Adversarial Examples"></a>Generate Natural Adversarial Examples</h2><h2 id="AdvFlow-Inconspicuous-Black-box-Adversarial-Attacks-using-Normalizing-Flows-NIPS-2020"><a href="#AdvFlow-Inconspicuous-Black-box-Adversarial-Attacks-using-Normalizing-Flows-NIPS-2020" class="headerlink" title="AdvFlow: Inconspicuous Black-box Adversarial Attacks using Normalizing Flows, NIPS 2020"></a>AdvFlow: Inconspicuous Black-box Adversarial Attacks using Normalizing Flows, NIPS 2020</h2><p>生成的对抗样本能围绕在干净样本附近</p>
<h2 id="Adversarial-Distributional-Training-for-Robust-Deep-Learning-NIPS-2020"><a href="#Adversarial-Distributional-Training-for-Robust-Deep-Learning-NIPS-2020" class="headerlink" title="Adversarial Distributional Training for Robust Deep Learning, NIPS 2020"></a>Adversarial Distributional Training for Robust Deep Learning, NIPS 2020</h2><p>产生分布更广的对抗样本</p>
<h2 id="Attribute-Guided-Adversarial-Training-for-Robustness-to-Natural-Perturbations-AAAI-2021"><a href="#Attribute-Guided-Adversarial-Training-for-Robustness-to-Natural-Perturbations-AAAI-2021" class="headerlink" title="Attribute-Guided Adversarial Training for Robustness to Natural Perturbations. AAAI 2021"></a>Attribute-Guided Adversarial Training for Robustness to Natural Perturbations. AAAI 2021</h2><p>如果预测的对抗样本和训练的对抗样本没有来自同一分布，就会导致鲁棒性的下降。所以本文在内部最大化时，操纵图像属性空间的变化，这样训练出来的模型更具鲁棒性。</p>
<h2 id="Mart算法流程"><a href="#Mart算法流程" class="headerlink" title="Mart算法流程"></a>Mart算法流程</h2><p><a href="https://www.geek-share.com/detail/2803287440.html">https://www.geek-share.com/detail/2803287440.html</a></p>
<h2 id="Mart算法原理解释"><a href="#Mart算法原理解释" class="headerlink" title="Mart算法原理解释"></a>Mart算法原理解释</h2><p><a href="https://muyuuuu.github.io/2021/06/22/MART/">https://muyuuuu.github.io/2021/06/22/MART/</a><br>Mart针对错分样本的loss作为正则化项添加到损失中、Mart_loss&#x3D;对抗样本loss+对抗样本和正常样本的kl散度、Mart目的是提升鲁棒性</p>
<h2 id="TRADES算法实现"><a href="#TRADES算法实现" class="headerlink" title="TRADES算法实现"></a>TRADES算法实现</h2><p><a href="https://github.com/yaodongyu/TRADES">https://github.com/yaodongyu/TRADES</a><br>TRADES的loss&#x3D;正常样本loss+对抗样本和正常样本的KL散度、TRADES目的是提升干净样本准确率</p>
<h2 id="TRADES算法原理"><a href="#TRADES算法原理" class="headerlink" title="TRADES算法原理"></a>TRADES算法原理</h2><p><a href="https://zhuanlan.zhihu.com/p/337989683">https://zhuanlan.zhihu.com/p/337989683</a><br><a href="https://zhuanlan.zhihu.com/p/296809584">https://zhuanlan.zhihu.com/p/296809584</a></p>
<h2 id="SD-layer-stain-deconvolutional-layer-for-CNNs-in-medical-microscopic-imaging"><a href="#SD-layer-stain-deconvolutional-layer-for-CNNs-in-medical-microscopic-imaging" class="headerlink" title="SD-layer: stain deconvolutional layer for CNNs in medical microscopic imaging"></a>SD-layer: stain deconvolutional layer for CNNs in medical microscopic imaging</h2><p>C_NMC</p>
<h2 id="GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images"><a href="#GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images" class="headerlink" title="GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images"></a>GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images</h2><p>数据：</p>
<ul>
<li><p>BRCA-08 (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0009">Gelasca et al., 2008</a>)</p>
</li>
<li><p>SN-AM (ALL) (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0015">Gupta and Gupta, 2019d</a>)</p>
</li>
<li><p>SN-AM (MM) (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0015">Gupta and Gupta, 2019d</a>)</p>
</li>
</ul>
<h2 id="Heterogeneity-Loss-to-Handle-Intersubject-and-Intrasubject-Variability-in-Cancer"><a href="#Heterogeneity-Loss-to-Handle-Intersubject-and-Intrasubject-Variability-in-Cancer" class="headerlink" title="Heterogeneity Loss to Handle Intersubject and Intrasubject Variability in Cancer"></a><strong>Heterogeneity Loss to Handle Intersubject and Intrasubject Variability in Cancer</strong></h2><p>C_NMC 指标：weighted F1Score</p>
<ul>
<li><p>Neighborhood-correction algorithm for classification of normal and malignant cells. In Gupta A. and Gupta R. (eds.), <strong>ISBI</strong></p>
</li>
<li><p>Classification of normal and leukemic blast cells in B-ALL cancer using a combination of convolutional and recurrent neural networks <strong>ISBI</strong></p>
</li>
<li><p>Sdct-auxnetθ: Dct augmented stain deconvolutional cnn with auxiliary classifier for cancer diagnosis. <strong>Medical Image Analysis</strong>, </p>
<p>&#x3D; balanced accuracy、weighted F1</p>
</li>
</ul>
<p>基本上是用flod012训练数据进行交叉验证、或竞赛提供的训练测试集</p>
<h2 id="对抗训练中的过拟合现象和对抗训练技巧总结"><a href="#对抗训练中的过拟合现象和对抗训练技巧总结" class="headerlink" title="对抗训练中的过拟合现象和对抗训练技巧总结"></a>对抗训练中的过拟合现象和对抗训练技巧总结</h2><p><a href="https://blog.csdn.net/motoight/article/details/121972761">https://blog.csdn.net/motoight/article/details/121972761</a><br>对抗训练+数据增广（mixup等）对鲁棒性提升没效果<br>对抗训练技巧：</p>
<ul>
<li>看论文:Bag of Tricks for Adversarial Training（ICLR 2021）</li>
<li>github:<a href="https://github.com/P2333/Bag-of-Tricks-for-AT">https://github.com/P2333/Bag-of-Tricks-for-AT</a></li>
</ul>
<p>对抗训练标准代码：<br><a href="https://github.com/P2333/Bag-of-Tricks-for-AT/blob/master/train_cifar.py">https://github.com/P2333/Bag-of-Tricks-for-AT/blob/master/train_cifar.py</a></p>
<h2 id="对抗训练与稳健性"><a href="#对抗训练与稳健性" class="headerlink" title="对抗训练与稳健性"></a>对抗训练与稳健性</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/296809584">https://zhuanlan.zhihu.com/p/296809584</a></p>
<p>Aleksander Madry等人提出的PGD对抗训练并不使用正常样本，但是后来的TRADES等又指出使用正常样本可以增加模型的精确度</p>
<p>对抗训练除了提升对抗稳健性以外，得到的模型更具可解释的梯度[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_28">28]</a></p>
<p>正常训练得到的模型的梯度都比较杂乱，要解释一个正常训练的模型，往往需要使用一些额外的方法（例如 Grad-CAM[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_30">30]</a>），但是对抗训练得到的模型，使用梯度就可以较好地解释模型的分类结果[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_24">24]</a></p>
<p>正常训练的模型更关注图像纹理，对抗训练模型更关注形状和全局</p>
<h3 id="对抗训练的几个变体"><a href="#对抗训练的几个变体" class="headerlink" title="对抗训练的几个变体"></a>对抗训练的几个变体</h3><p><img src="/../images/image-20220414214110412.png" alt="image-20220414214110412"></p>
<p>参考：北大哔哩哔哩：<a href="https://www.bilibili.com/video/BV1QK4y1j7nX/?spm_id_from=333.788.recommend_more_video.7">https://www.bilibili.com/video/BV1QK4y1j7nX/?spm_id_from=333.788.recommend_more_video.7</a></p>
<p><img src="/../images/image-20220414214613164.png" alt="image-20220414214613164"></p>
<p>参考：<a href="https://www.bilibili.com/video/BV1aa4y147dg?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1aa4y147dg?spm_id_from=333.337.search-card.all.click</a></p>
<p>SVM这种对抗样本我们如何去防御？</p>
<ul>
<li>攻击主要在特征上，在特征空间上做噪声，尺度什么的，比如文本，在输入字符上做一些操作，防御这一块也是min-max的方式进行。</li>
</ul>
<h3 id="攻击效能指标"><a href="#攻击效能指标" class="headerlink" title="攻击效能指标"></a>攻击效能指标</h3><p><a href="https://jjzhou012.github.io/blog/2020/05/25/A-uniform-platform-for-security-analysis-of-deep-learning-model.html#22-%E6%94%BB%E5%87%BB%E6%95%88%E8%83%BD%E6%8C%87%E6%A0%87">https://jjzhou012.github.io/blog/2020/05/25/A-uniform-platform-for-security-analysis-of-deep-learning-model.html#22-%E6%94%BB%E5%87%BB%E6%95%88%E8%83%BD%E6%8C%87%E6%A0%87</a></p>
<h2 id="T-sne-的代码"><a href="#T-sne-的代码" class="headerlink" title="T-sne 的代码"></a>T-sne 的代码</h2><p><a href="https://blog.csdn.net/motoight/article/details/120791928?spm=1001.2014.3001.5502">https://blog.csdn.net/motoight/article/details/120791928?spm=1001.2014.3001.5502</a><br>多尝试不同的perplexity 来得到稳健的效果</p>
<h2 id="INTRIGUING-PROPERTIES-OF-ADVERSARIAL-TRAINING-AT-SCALE"><a href="#INTRIGUING-PROPERTIES-OF-ADVERSARIAL-TRAINING-AT-SCALE" class="headerlink" title="INTRIGUING PROPERTIES OF ADVERSARIAL TRAINING AT SCALE"></a>INTRIGUING PROPERTIES OF ADVERSARIAL TRAINING AT SCALE</h2><p>对抗训练时用混合BN</p>
<h2 id="小组会结论"><a href="#小组会结论" class="headerlink" title="小组会结论"></a>小组会结论</h2><p>白血病异质性大<br>形态是基石，疾病分级还需要细胞化学助阵<br>Recall要大？</p>
<h2 id="C-NMC数据用什么做的数据预处理"><a href="#C-NMC数据用什么做的数据预处理" class="headerlink" title="C_NMC数据用什么做的数据预处理"></a>C_NMC数据用什么做的数据预处理</h2><ol>
<li>论文HETEROGENEITY LOSS TO HANDLE INTERSUBJECT AND INTRASUBJECT VARIABILITY IN CANCER说: <code> The images were normalized for stain color variability (Gupta et al., 2017) and cells, marked by expert oncologists, were segmented (Duggal et al., 2016).</code></li>
</ol>
<ul>
<li><p>Stain color normalization and segmentation of plasma cells in microscopic images as a prelude to development of computer assisted automated disease diagnostic tool in multiple myeloma. Clinical Lymphoma, Myeloma and Leukemia, 17(1):e99, Feb 2017——<strong>染色归一化</strong></p>
</li>
<li><p>Overlapping cell nuclei segmentation in microscopic images using deep belief networks. In Proceedings of the Tenth ICGVIP, pp. 82:1–82:8, 2016 ——<strong>分割白细胞核</strong> ——任何此类研究的第一步都需要从这些簇中分割单个细胞核？？？链接：<a href="http://www.rahulduggal.com/ICVGIP_2016/ICVGIP_16_poster.pdf">http://www.rahulduggal.com/ICVGIP_2016/ICVGIP_16_poster.pdf</a></p>
</li>
<li><p>论文：A color and shape based algorithm for segmentation of white blood cells in peripheral blood and bone marrow images——<strong>分割白细胞核</strong></p>
</li>
</ul>
<ol start="2">
<li><p>C_NMC_readme文件声称用stain color normalization方法去除染色噪声、照明误差<br>并不知道为什么要分割出细胞核</p>
</li>
<li><p>C_NMC预处理步骤：染色归一化-&gt;细胞核分割</p>
</li>
</ol>
<h2 id="C-NMC-final-test-submit"><a href="#C-NMC-final-test-submit" class="headerlink" title="C_NMC final test submit"></a>C_NMC final test submit</h2><p>提交连接：<a href="https://competitions.codalab.org/competitions/20395#participate-submit_results">https://competitions.codalab.org/competitions/20395#participate-submit_results</a></p>
<h3 id="关于C-NMC数据分割成细胞核的原因，作者回答"><a href="#关于C-NMC数据分割成细胞核的原因，作者回答" class="headerlink" title="关于C_NMC数据分割成细胞核的原因，作者回答"></a>关于C_NMC数据分割成细胞核的原因，作者回答</h3><p>邮件链接：<a href="https://mail.qq.com/cgi-bin/frame_html?sid=hpIBU9GIACx0TQRm&amp;target=today">https://mail.qq.com/cgi-bin/frame_html?sid=hpIBU9GIACx0TQRm&amp;target=today</a></p>
<blockquote>
<p>Since the problem is on cell image classification and B-ALL cells do not have much cytoplasm, that is why it consists of only segmented nuclei.</p>
</blockquote>
<blockquote>
<p>Here is the link. You can sign in and participate in the leaderboard for assessing your performance on the testset.</p>
</blockquote>
<blockquote>
<p><a href="https://competitions.codalab.org/competitions/20395#participate">https://competitions.codalab.org/competitions/20395#participate</a></p>
</blockquote>
<blockquote>
<p>On Sat, Apr 9, 2022 at 1:27 PM lxy &lt;<a href="mailto:lxy_from_swust@foxmail.com">lxy_from_swust@foxmail.com</a>&gt; wrote:</p>
</blockquote>
<blockquote>
<p>Dear Dr. Anubha Gupta:</p>
<p>​    Thank you for reading!</p>
<p>​    I am a second-year master’s student at Shenzhen University, China. My name is mona, and my Chinese is Xinyuan Liu。</p>
<p>​    I’ve been using your dataset C_NMC for some experiments recently, but I don’t understand why the C_NMC data are segmented nuclei without any background, what is the motivation for this? The second question is how do I use the final test for testing? I could not find a portal on the competition website to submit the final test set results, so I don’t know the performance of my model on the final test.</p>
<p>   Thank you very much for your kind consideration and I would like to know how to solve these two problems and looking forward to your early reply.</p>
<p>Sincerely, yours</p>
<p>mona</p>
</blockquote>
<p>--</p>
<p>-———————————————–<br>Dr. Anubha Gupta<br>Professor, Deptt. of ECE<br>Member, Infosys Center for AI, IIIT Delhi<br>Member, Center of Excellence in Healthcare, IIIT-Delhi.<br><a href="http://faculty.iiitd.ac.in/~anubha/">http://faculty.iiitd.ac.in/~anubha/</a><br>Lab: <a href="http://sbilab.iiitd.edu.in/index.html">http://sbilab.iiitd.edu.in/index.html</a></p>
<h2 id="GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images-1"><a href="#GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images-1" class="headerlink" title="GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images"></a>GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images</h2><p>一个显微图像的染色标准化方法GCTI-SN，校正光照变化、染色化学物质和染色量变化<br>C_NMC</p>
<h2 id="SD-Layer-Stain-Deconvolutional-Layer-for-CNNs-in-Medical-Microscopic-Imaging"><a href="#SD-Layer-Stain-Deconvolutional-Layer-for-CNNs-in-Medical-Microscopic-Imaging" class="headerlink" title="SD-Layer: Stain Deconvolutional Layer for CNNs in Medical Microscopic Imaging"></a>SD-Layer: Stain Deconvolutional Layer for CNNs in Medical Microscopic Imaging</h2><p>分类恶性未成熟白细胞 (WBC) 和正常未成熟白细胞<br>创新在于提出SD-Layer层</p>
<h2 id="auto-attack"><a href="#auto-attack" class="headerlink" title="auto attack"></a>auto attack</h2><h2 id="对抗攻击研究方向"><a href="#对抗攻击研究方向" class="headerlink" title="对抗攻击研究方向"></a>对抗攻击研究方向</h2><p><a href='https://www.zhihu.com/question/359151065/answers/updated'>AI研究方向：对抗攻击研究前景怎么样？</a><br><a href='https://mp.weixin.qq.com/s?__biz=Mzg4NDYwOTUwNA==&mid=2247484255&idx=1&sn=7115dc04ea48fb1c35ee2a0a97f5d38f&chksm=cfb4dbd0f8c352c63fad390b95c7a6c0a7d3c874929dfc3e82bbff53c3551767545f36d16e50&token=1530652917&lang=zh_CN#rd'>【CV算法兵器】“晓风残月” -&gt;对抗攻击“兵器”大放送（综述篇）</a><br><a href='https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/108067350'>经典对抗攻击Deepfool原理详解与代码解读</a></p>
<h2 id="对抗领域大佬"><a href="#对抗领域大佬" class="headerlink" title="对抗领域大佬"></a>对抗领域大佬</h2><p><a href='https://www.zhihu.com/people/cihangxie'>Cihang Xie知乎</a><br><a href='https://cihangxie.github.io/'>Cihang Xie主页</a><br><a href="https://yisenwang.github.io/">王奕森</a><br><a href='http://loganengstrom.com/'> Logan Engstrom</a><br><a href='https://madry.mit.edu/'>Aleksander Mądry</a><br><a href='https://scholar.google.com/citations?user=26eh1jAAAAAJ&hl=zh-CN&oi=sra'>Dimitris Tsipras</a><br><a href='http://xingjunma.com/'>Xingjun Ma</a></p>
<h6 id="小组会"><a href="#小组会" class="headerlink" title="小组会"></a>小组会</h6><p>论文小问题修改了</p>
<p><strong>各种生成对抗样本算法对比PPT做好了，其中STN和One pixel攻击算法是否可以使用并替换现有算法，解释STN和One pixel原理</strong>——调研最新、最好的方法</p>
<p><strong>STN生成对抗样本算法原理，实验结果如何</strong></p>
<p><strong>exp:</strong></p>
<ol>
<li>为什么rotate没有效果，是不是我设置nums&#x3D;60固定的缘故，展示nums和range值范围——用BO搜索最优点</li>
<li>虽然rotate对Acc下降没有效果，但invariance下降了就说明预测标签会变化，模型不鲁棒了，所以还是可以使用rotate对抗样本呢？——用Recall等更多的指标来分析结果</li>
<li><strong>展示nums随着range更改的单一rotate、transition实验结果</strong></li>
<li><strong>混合最差的样本设置是否是（trans&#x3D;12 scale&#x3D;0.5 rotate&#x3D;90），通过这个来缩小搜索范围，加快搜素速度</strong></li>
<li>展示scale实验结果，讨论缩放的场景是否有可能   ——没有对抗的方法生成scale的样本，不可行</li>
</ol>
<h6 id="5月13日-大组会"><a href="#5月13日-大组会" class="headerlink" title="5月13日 大组会"></a>5月13日 大组会</h6><p>下一步工作</p>
<p>1&#x2F;只可视化分类正确样本被攻击后的准确率趋势<br>2&#x2F;用C_NMC的模型进行实验</p>
]]></content>
      <tags>
        <tag>keyan</tag>
      </tags>
  </entry>
  <entry>
    <title>优质资源</title>
    <url>/2022/03/17/%E6%94%B6%E9%9B%86%E4%BC%98%E7%A7%80%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>收集优秀的博客、公众号等，便于时常阅读</p>
<span id="more"></span>

<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href='https://muyiy.cn/blog/'>木易杨前端进阶</a><br><a href='https://staging-cn.vuejs.org/guide/typescript/composition-api.html'>更清楚的Vue3文档</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端CSS</title>
    <url>/2022/04/30/%E5%89%8D%E7%AB%AFCSS/</url>
    <content><![CDATA[<p>CSS相关知识</p>
<span id="more"></span>


<h2 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h2><p>position: absolute|relative|fixed|sticky<br>z-index:0|1 该属性可以解决重叠元素问题</p>
<p><a href='https://www.ruanyifeng.com/blog/2019/11/css-position.html'>CSS 定位详解</a><br><a href='https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Positioning'>CSS 定位 MDN</a><br><a href='https://jsbin.com/jafeqarepo/edit?html,css,output'>demo</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端JS</title>
    <url>/2022/04/30/%E5%89%8D%E7%AB%AFJS/</url>
    <content><![CDATA[<p>JS知识点</p>
<span id="more"></span>


<h2 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h2><p><a href='https://www.bilibili.com/video/BV1864y117PQ?p=2&share_medium=iphone&share_plat=ios&share_session_id=95D86177-AF23-4C6E-A45B-F1EFA4D0D48C&share_source=WEIXIN&share_tag=s_i&timestamp=1651559870&unique_k=01mzLbf'>方方讲Event Loop</a><br><a href='https://www.bilibili.com/video/BV1kf4y1U7Ln?p=1&share_medium=iphone&share_plat=ios&share_session_id=BA787B04-4CED-4459-B2F3-F976759F0609&share_source=WEIXIN&share_tag=s_i&timestamp=1651560378&unique_k=uEn3leu'>2分钟了解 JavaScript Event Loop</a><br><a href='https://juejin.cn/post/6844904021296316429'>EventLoop面试经典</a></p>
<p>nextTick 当前任务执行完后立即执行<br>resolve() 看见它就会推迟2个微任务<br>Node和浏览器都会设置一个超限任务数量，比如当微任务做了100个时就不再继续做微任务了，转而执行宏任务<br>Node和JS中的Event Loop不一样</p>
<h6 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h6><p>setTimeout setInterval requestAnimationFrame</p>
<h6 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h6><p>Promises queueMicrotask MutationObserver</p>
<h6 id="Node的六个阶段"><a href="#Node的六个阶段" class="headerlink" title="Node的六个阶段"></a>Node的六个阶段</h6><p>【1 timers】            setTimeout setInterval 【nextTick】<br>【2 I&#x2F;O callbacks】<br>【3 idle,prepare】<br>【4 poll】              轮询 文件【nextTick】<br>【5 check】             setImmediate【nextTick】<br>【6 close callbacks】<br>nextTick、Promise.then()在每一个阶段的末尾立即执行</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h6 id="Ajax介绍"><a href="#Ajax介绍" class="headerlink" title="Ajax介绍"></a>Ajax介绍</h6><p>可参考：<a href='https://www.zhihu.com/question/20874229'>你怎么用最通俗的话解释AJAX是什么东西</a></p>
<p>直白地说，就是没用AJAX的网页，你点一个按钮就要刷新一下页面，尽管新页面上只有一行字和当前页面不一样，但你还是要无聊地等待页面刷新。用了AJAX之后，你点击，然后页面上的一行字就变化了，页面本身不用刷。AJAX只是一种技术，不是某种具体的东西。不同的浏览器有自己实现AJAX的组件。</p>
<p>AJAX&#x3D;异步传输+JS+XML（现在其实是用JSON数据格式代替XML）</p>
<p>使用Ajax技术不必刷新整个页面，只需对页面的局部进行更新，可以节省网络带宽，提高页面的加载速度，从而缩短用户等待时间，改善用户体验</p>
<h6 id="Ajax实现"><a href="#Ajax实现" class="headerlink" title="Ajax实现"></a>Ajax实现</h6><p>可参考：<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022332902400'>廖雪峰的AjAX</a><br><a href='https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started'>MDN AJAX</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> textarea = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test-response-text&#x27;</span>);</span><br><span class="line">    textarea.<span class="property">value</span> = text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> textarea = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test-response-text&#x27;</span>);</span><br><span class="line">    textarea.<span class="property">value</span> = <span class="string">&#x27;Error code: &#x27;</span> + code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// 新建XMLHttpRequest对象</span></span><br><span class="line"></span><br><span class="line">request.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 状态发生变化时，函数被回调</span></span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">readyState</span> === <span class="number">4</span>) &#123; <span class="comment">// 成功完成</span></span><br><span class="line">        <span class="comment">// 判断响应结果:</span></span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功，通过responseText拿到响应的文本:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">success</span>(request.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败，根据响应码判断失败原因:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">fail</span>(request.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// HTTP请求还在继续...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h6 id="实现跨域的几种方法"><a href="#实现跨域的几种方法" class="headerlink" title="实现跨域的几种方法"></a>实现跨域的几种方法</h6><p>可以参考：<a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022332902400'>廖雪峰的AjAX</a></p>
<ol>
<li>用flash插件发送HTTP请求</li>
<li>再同源域名下开一个代理服务器来转发，代理服务器把结果返回</li>
<li>JSONP。这种方法利用了浏览器允许跨域引用JavaScript资源</li>
<li>CORS。目标域设置Access-Control-Allow-Origin</li>
</ol>
<h6 id="前端发展史"><a href="#前端发展史" class="headerlink" title="前端发展史"></a>前端发展史</h6><p>参考：<a href="https://time.geekbang.org/column/article/427660">https://time.geekbang.org/column/article/427660</a></p>
<ol>
<li>静态页面（HMTL+CSS+JavaScript）</li>
<li>动态网页（MVC写模板代码（JSP+Smarty））（但是这样做的坏处是每次更新数据都会刷新一遍页面）</li>
<li>Ajax。这个技术可以异步的获取数据并且可以不刷新整个页面</li>
<li>JQuery开发模式（前端代码内嵌在后端（JQuery+Bootstrap）、DOM操作、统一了写法解决了兼容性）</li>
<li>MVVM模式（Angular、React、Vue）（数据驱动页面）</li>
</ol>
<h6 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h6><p>参考：<a href="https://xiedaimala.com/tasks/c08da570-56a5-4afc-b5e9-b9a48f005d23/video_tutorials/f3df3400-0749-4989-be33-278d21b5438c">https://xiedaimala.com/tasks/c08da570-56a5-4afc-b5e9-b9a48f005d23/video_tutorials/f3df3400-0749-4989-be33-278d21b5438c</a></p>
<p>首先虚拟DOM好于真实DOM，因为真实dom在渲染过程中会造成dom的重排和重绘，虚拟DOM只会渲染局部，性能更好</p>
<p>React中的虚拟DOM<br>diff计算<br>Vue2.0中的虚拟DOM<br>一是通过绑定Watcher（控制组件间变化），二是通过虚拟DOM（控制组件内部数据变化）</p>
<h6 id="computed-watch"><a href="#computed-watch" class="headerlink" title="computed watch"></a>computed watch</h6><h6 id="Vue2到Vue3做了什么"><a href="#Vue2到Vue3做了什么" class="headerlink" title="Vue2到Vue3做了什么"></a>Vue2到Vue3做了什么</h6><p>参考：<a href="https://time.geekbang.org/column/article/428904">https://time.geekbang.org/column/article/428904</a></p>
<ol>
<li>Vue2<br>响应式驱动、内置虚拟DOM、组件化、浏览器开发<br>Vue2缺陷：</li>
</ol>
<ul>
<li>有跨端问题。因为Vue 2 内部运行时，是直接执行浏览器 API 的，跨端时就需要把浏览器API换成客户端或者小程序的。</li>
<li>Option API在较多组件时，代码不易维护。因为对于 Option API 来说，所有的 methods、computed 都在一个对象里配置，新增或者修改一个功能，就需要不停地在 data，methods 里跳转写代码，我称之为上下反复横跳。</li>
</ul>
<ol start="2">
<li>Vue3<br>7个新特性：响应式系统、Composition API、Vite、自定义渲染器、RFC机制、TypeScript重构</li>
</ol>
<ul>
<li>新的 RFC 机制也让我们所有人都可以参与 Vue 新语法的讨论。</li>
<li>工程化工具 Vite 带来了更丝滑的调试体验。</li>
<li>Composition API 组合语法带来了更好的组织代码的形式</li>
<li>全新的响应式系统基于 Proxy，也可以独立使用</li>
<li>Vue 3 内置了新的 Fragment、Teleport 和 Suspense 等组件</li>
<li>对于 Vue 的二次开发来说，自定义渲染器让我们开发跨端应用时更加得心应手</li>
<li>对于 Vue 的源码维护者，全部的模块使用 TypeScript 重构，能够带来更好的可维护性。</li>
</ul>
<p><a href='https://static001.geekbang.org/resource/image/cc/d0/cc47460b1f9441d843bff6d37777a8d0.jpg?wh=3059x1664'>Vue3新特性</a></p>
<h6 id="Object-defineProperty-和-Proxy"><a href="#Object-defineProperty-和-Proxy" class="headerlink" title="Object.defineProperty() 和 Proxy"></a>Object.defineProperty() 和 Proxy</h6><p>参考：<a href="https://vue3js.cn/es6/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8proxy%E9%87%8D%E6%9E%84">https://vue3js.cn/es6/#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8proxy%E9%87%8D%E6%9E%84</a></p>
<p>Vue2的响应式机制是基于Object.defineProperty()实现的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;title&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params"></span>) &#123; &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这两者的区别呢？<br>defineProperty 本身，是对对象上的属性做操作，而非对象本身，新增属性无法通过 get set 更新。<br>Proxy 劫持的是整个对象，而不想defineProperty那样是对象上的属性，所以新增属性也能get set</p>
<h6 id="Options-API-和-Composition-API"><a href="#Options-API-和-Composition-API" class="headerlink" title="Options API 和 Composition API"></a>Options API 和 Composition API</h6><p>参考：<a href="https://time.geekbang.org/column/article/428904">https://time.geekbang.org/column/article/428904</a></p>
<p>Options API 的写法也有几个很严重的问题：</p>
<ul>
<li>由于所有数据都挂载在 this 之上，因而 Options API 的写法对 TypeScript 的类型推导很不友好，并且这样也不好做 Tree-shaking 清理代码。</li>
<li>新增功能基本都得修改 data、method 等配置，并且代码上 300 行之后，会经常上下反复横跳，开发很痛苦。</li>
<li>代码不好复用，Vue 2 的组件很难抽离通用逻辑，只能使用 mixin，还会带来命名冲突的问题。</li>
</ul>
<p>使用 Composition API 好处：</p>
<ul>
<li>所有 API 都是 import 引入的，用到的功能都 import 进来，对 Tree-shaking 很友好，我的例子里没用到功能，打包的时候会被清理掉 ，减小包的大小。</li>
<li>不再上下反复横跳，我们可以把一个功能模块的 methods、data 都放在一起书写，维护更轻松。</li>
<li>代码方便复用，可以把一个功能所有的 methods、data 封装在一个独立的函数里，复用代码非常容易。</li>
<li>Composotion API 新增的 return 等语句，在实际项目中使用</li>
</ul>
<p><a href='https://static001.geekbang.org/resource/image/a0/5f/a0010538b40e48fc5fc68b0eed2b025f.jpg?wh=3220x2046'>Options API 和 Composition API代码结构对比</a></p>
<h6 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h6><h6 id="Vue3中使用TS"><a href="#Vue3中使用TS" class="headerlink" title="Vue3中使用TS"></a>Vue3中使用TS</h6><p>参考：<a href="https://time.geekbang.org/column/article/445880">https://time.geekbang.org/column/article/445880</a></p>
<h6 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h6><p>参考：<a href="https://time.geekbang.org/column/article/431955">https://time.geekbang.org/column/article/431955</a></p>
<p>Composition API 的逻辑来拆分代码，把一个功能相关的数据和方法都维护在一起。</p>
<h6 id="Vue3生命周期钩子"><a href="#Vue3生命周期钩子" class="headerlink" title="Vue3生命周期钩子"></a>Vue3生命周期钩子</h6><h6 id="HTTP-x2F-2协议相对于HTTP-x2F-1-1在性能上有了很大的提升，主要具有以下新特性"><a href="#HTTP-x2F-2协议相对于HTTP-x2F-1-1在性能上有了很大的提升，主要具有以下新特性" class="headerlink" title="HTTP&#x2F;2协议相对于HTTP&#x2F;1.1在性能上有了很大的提升，主要具有以下新特性"></a>HTTP&#x2F;2协议相对于HTTP&#x2F;1.1在性能上有了很大的提升，主要具有以下新特性</h6><p>二进制分帧<br>请求与响应复用<br>服务端推送<br>头部压缩</p>
]]></content>
  </entry>
  <entry>
    <title>深度学习中pytorch操作</title>
    <url>/2022/05/13/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%ADpytorch%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>pytorch 数据处理</p>
<span id="more"></span>

<h3 id="创建空的tensor"><a href="#创建空的tensor" class="headerlink" title="创建空的tensor"></a>创建空的tensor</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logits_cpu = torch.tensor([])</span><br></pre></td></tr></table></figure>

<h3 id="保存两列tensor到csv文件"><a href="#保存两列tensor到csv文件" class="headerlink" title="保存两列tensor到csv文件"></a>保存两列tensor到csv文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayStruct = numpy.transpose(</span><br><span class="line">[targets_cpu.cpu().numpy(), logits_cpu[:, 0].numpy(), logits_cpu[:, 1].numpy()])</span><br><span class="line"></span><br><span class="line">with open(output, &#x27;w&#x27;) as f:</span><br><span class="line">	numpy.savetxt(f, ArrayStruct, header=&#x27;targets, logits0, logits1&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="torch-where-y-pred-gt-0-5-1-0"><a href="#torch-where-y-pred-gt-0-5-1-0" class="headerlink" title="torch.where(y_pred&gt;0.5, 1, 0)"></a>torch.where(y_pred&gt;0.5, 1, 0)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/06/16/dc18d7dc93cff74a.png" alt="image-20220523212137021"></p>
<h3 id="natural-y-pred-x3D-x3D-y-sum-dim-x3D-0"><a href="#natural-y-pred-x3D-x3D-y-sum-dim-x3D-0" class="headerlink" title="(natural_y_pred &#x3D;&#x3D; y).sum(dim&#x3D;0)"></a>(natural_y_pred &#x3D;&#x3D; y).sum(dim&#x3D;0)</h3><p><img src="https://s3.bmp.ovh/imgs/2022/06/16/c6d2b69659a9311a.png" alt="image-20220523221816231"></p>
]]></content>
  </entry>
  <entry>
    <title>mianjin</title>
    <url>/2022/05/24/mianjin/</url>
    <content><![CDATA[<span id="more"></span>
<p>面经汇总：<a href="https://www.nowcoder.com/discuss/experience?tagId=644">https://www.nowcoder.com/discuss/experience?tagId=644</a></p>
<h2 id="每日刷的面经宝典"><a href="#每日刷的面经宝典" class="headerlink" title="每日刷的面经宝典"></a>每日刷的面经宝典</h2><p>要有针对性的刷题，根据项目来衍生出刷的题，最好用梅花生长的项目</p>
<ol>
<li><p>100个请求哪一个最快发到客户端，考的是Promise 并发</p>
</li>
<li><p>简单介绍自己的项目（重新用Vue3重构了下）</p>
</li>
<li><p>vue3简单介绍一下（Vue3引入的核心功能，对比Vue2）</p>
</li>
<li><p>Vuex，比较下mutation和actions</p>
</li>
<li><p>前端怎么实现路由中间件，可以进行一些状态检测，例如，登录检测</p>
</li>
<li><p>js常用的异步编程有那些，callback&#x3D;》promise&#x3D;》generator&#x3D;》async&#x3D;》await</p>
</li>
<li><p>发布订阅模式，设计模式</p>
</li>
<li><p>setTimeout执行机制</p>
</li>
<li><p>Promise.all</p>
</li>
<li><p>使用Promise实现：限制异步操作的并发个数，并尽可能快的完成全部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">recur</span>(u):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="title function_">len</span>(u)==<span class="number">0</span>: <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">3</span>-count):</span><br><span class="line"></span><br><span class="line">​    cur=u.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">​    count++</span><br><span class="line"></span><br><span class="line">​	<span class="title function_">loadImg</span>(cur).<span class="title function_">finally</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">​    count--</span><br><span class="line"></span><br><span class="line">​    <span class="title function_">recur</span>(u)</span><br><span class="line"></span><br><span class="line">​    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">recur</span>(urls)</span><br></pre></td></tr></table></figure>





</li>
<li><p>第1题：实现 Promise.race 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span>=<span class="keyword">function</span>(<span class="params">arr</span>)&#123;</span><br><span class="line"></span><br><span class="line">​	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, rejuct</span>)&#123;</span><br><span class="line"></span><br><span class="line">​			<span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">​				<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(arr[i]).<span class="title function_">then</span>(resolve, reject)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>第2题：promise.catch后面的.then还会执行吗？</p>
</li>
</ol>
<p>会继续执行，.catch后也会返回一个promise对象, .then()会继续执行</p>
<ol start="14">
<li><p>第4题：使用Promise封装一个异步加载图片的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>)&#123;</span><br><span class="line"></span><br><span class="line">​		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">​				<span class="keyword">const</span> img=<span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line"></span><br><span class="line">​				img.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">​						<span class="title function_">resolve</span>(img)</span><br><span class="line"></span><br><span class="line">​				&#125;</span><br><span class="line"></span><br><span class="line">​			&#125;)</span><br><span class="line"></span><br><span class="line">​		&#125;-</span><br></pre></td></tr></table></figure>



</li>
<li><p>Fetch取消请求，并行请求</p>
</li>
</ol>
<p><a href="https://zh.javascript.info/fetch-abort">https://zh.javascript.info/fetch-abort</a></p>
<p><a href="https://blog.csdn.net/qq_43634982/article/details/120414004">https://blog.csdn.net/qq_43634982/article/details/120414004</a></p>
<ol start="15">
<li><p>什么是Promise</p>
</li>
<li><p>二分查找</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number[]</span>&#125; <span class="variable">nums</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="keyword">function</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> r=nums.<span class="property">length</span>-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> mid=<span class="title class_">Math</span>.<span class="title function_">floor</span>((l+r)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="property">length</span>===<span class="number">0</span>)&#123; <span class="keyword">return</span> -<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            </span><br><span class="line">        mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((l+r)/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(target===nums[mid])&#123;  <span class="keyword">return</span> mid&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;	r=mid-<span class="number">1</span>&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (target&gt;nums[mid])&#123;	l=mid+<span class="number">1</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<ol start="17">
<li><p>第6题：使用Promise实现红绿灯交替重复亮</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">p1=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">​	<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">​			<span class="title function_">red</span>()</span><br><span class="line"></span><br><span class="line">​			<span class="title function_">resolve</span>()</span><br><span class="line"></span><br><span class="line">​	&#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">​		p1.<span class="title function_">then</span>(p2).<span class="title function_">then</span>(p3).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">​			<span class="title function_">step</span>()</span><br><span class="line"></span><br><span class="line">​	&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">step</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>第46题：【Promise第一题】下面代码的输出是什么？</p>
</li>
<li><p>第45题：【Promise第三题】下面代码的输出是什么？</p>
</li>
<li><p>第44题：【Promise第四题】下面代码的输出是什么？</p>
</li>
<li><p>第43题：【Promise第五题】下面代码的输出是什么？</p>
</li>
<li><p>第42题：【Promise第二题】下面代码的输出是什么？</p>
</li>
<li><p>第3题：说说你对事件循环的理解</p>
</li>
<li><p>第2题：什么是响应式设计？响应式设计的基本原理是什么？如何进行实现？<br><a href="https://fe.ecool.fun/topic/dc8c6233-f645-444c-8e31-f18bc3f5244f?orderBy=updateTime&amp;order=desc&amp;titleKey=%E5%93%8D%E5%BA%94%E5%BC%8F">https://fe.ecool.fun/topic/dc8c6233-f645-444c-8e31-f18bc3f5244f?orderBy=updateTime&amp;order=desc&amp;titleKey=%E5%93%8D%E5%BA%94%E5%BC%8F</a></p>
</li>
</ol>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a></p>
<p><a href="https://chinese.freecodecamp.org/news/css-media-queries-breakpoints-media-types-standard-resolutions-and-more/">https://chinese.freecodecamp.org/news/css-media-queries-breakpoints-media-types-standard-resolutions-and-more/</a></p>
<ul>
<li><p>媒体查询</p>
</li>
<li><p>百分比</p>
</li>
<li><p>vw vh</p>
</li>
<li><p>rem</p>
</li>
<li><p>flex</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//媒体查询</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span>(<span class="attribute">max-width</span>: <span class="number">600px</span>)&#123;</span><br><span class="line">	<span class="selector-tag">body</span>&#123;</span><br><span class="line">		<span class="attribute">font-size</span>:<span class="number">18px</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="25">
<li><p>第2题：怎么让CSS flex布局最后一行列表左对齐？</p>
</li>
<li><p>第3题：canvas在标签上设置宽高，与在style中设置宽高有什么区别？</p>
</li>
</ol>
<p><a href="https://blog.csdn.net/yellowmushroom/article/details/89388377">https://blog.csdn.net/yellowmushroom/article/details/89388377</a></p>
<p>标签的width和height是设置画布宽度和高度，不会被拉伸</p>
<h2 id="腾讯前端实习一-二面"><a href="#腾讯前端实习一-二面" class="headerlink" title="腾讯前端实习一,二面"></a>腾讯前端实习一,二面</h2><p>作者：dara羽星<br>链接：<a href="https://www.nowcoder.com/discuss/954603?type=post&amp;order=hot&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_post_nctrack&amp;gio_id=6C9B02BCD77AC7951DD89A4914063199-1653400236717">https://www.nowcoder.com/discuss/954603?type=post&amp;order=hot&amp;pos=&amp;page=1&amp;ncTraceId=&amp;channel=-1&amp;source_id=search_post_nctrack&amp;gio_id=6C9B02BCD77AC7951DD89A4914063199-1653400236717</a><br>来源：牛客网</p>
<p>因为没录音只能想一点写一点。可能有很多遗漏<br>5.17一面 时长1h5min<br>    1. 隐藏元素的方法以及分别有什么区别<br>        <a href="https://juejin.cn/post/6943856363248287752">https://juejin.cn/post/6943856363248287752</a><br>        <a href="https://jsbin.com/wesidaluyi/edit?html,output">https://jsbin.com/wesidaluyi/edit?html,output</a><br>        display: none<br>        visibility: hidden<br>        opacity: 0<br>        position: relative<br>        position: absolute</p>
<pre><code>2. BFC介绍


3. 元素居中对齐
    https://juejin.cn/post/7001133554943918117
    https://jsbin.com/jadehizete/edit?html,css,output
    text-align: center
    margin: 0 auto
    dispaly:flex
    dispaly:grid
    transform
    负边距

4. 怎么让图片和文字居中对齐
    https://blog.csdn.net/ktutu/article/details/74552268
    https://jsbin.com/recasac/1/edit?html,output
    vertical-align middle
5. 行内元素和块级元素
https://juejin.cn/post/6844903593955328007
行内元素img span、块级元素div p、行内块级元素的转换display:inline-block float position:absolute position:fixec、置换元素img input

6. 事件委托
    https://zhuanlan.zhihu.com/p/26536815
    document.addEventListener、捕获、冒泡、$.on、$.delegeta、focus和blur事件没有事件冒泡机制，所以无法委托

7. 改变函数this指向的方法
    https://juejin.cn/post/6844904120466309127
    https://codepen.io/monaaaaaa2544/pen/eYVeJvw?editors=1111
    this在全局环境始终指向window
    func.call(obj, arg1, arg2)
    func.apply(obj, [arg1, arg2])
    f1=func.bind(obj) f1(arg1, arg2)

7. promise


8. async await


9. vue和react的区别
    https://juejin.cn/post/7028107265341128740
    从虚拟DOM的区别来说,React会重新渲染整个组件树，Vue局部渲染组件树，因为Vue对每一个组件绑定了依赖Watcher，哪一个组件改变了，就重新渲染组件内的元素


10. 前端状态管理 vuex(从源码方向上分析)
    https://segmentfault.com/a/1190000022205291

11. webpack的打包原理
12. vite的运行原理(不会)
13.vite是怎么把一个vue文件（结构样式逻辑部分转化为浏览器可以识别的部分的）
14.前端性能优化举例
    https://segmentfault.com/a/1190000022205291
    减少http请求（因为建立连接耗时）、用HTTP2替代HTTP1.1（HTTP2多路复用，多个请求只共用一个TCP连接）、用服务端渲染、静态资源使用CDN（从更近的地方获取资源，速度快）等
15.小程序了解吗
16.react–native/flutter了解吗
17.微前端了解吗
18.跨端框架了解吗(还问了很多xx了解吗 由于本人连名字都没听过 回忆不起来。)
19.平时关注什么前端博主
20. git命令
    https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html

21.一道算法
    数组去重并找出每个元素的重复次数(秒了)
22. 反问 
   公司技术栈(vue react 跨端啥的都有)
   学习建议(多看源码 多看原理)
</code></pre>
<h2 id="腾讯云智一面2022-5-11"><a href="#腾讯云智一面2022-5-11" class="headerlink" title="腾讯云智一面2022.5.11"></a>腾讯云智一面2022.5.11</h2><p>链接：<a href="https://www.nowcoder.com/discuss/958655?source_id=discuss_experience_nctrack&amp;channel=-1">https://www.nowcoder.com/discuss/958655?source_id=discuss_experience_nctrack&amp;channel=-1</a></p>
<ol>
<li><p>Vue特点<br><a href="https://juejin.cn/post/7069202241478983711">https://juejin.cn/post/7069202241478983711</a><br>数据双向绑定、组件化开发、响应式、单页Web应用、虚拟DOM</p>
</li>
<li><p>http攻击<br>跨站脚本攻击(XSS) 跨站请求伪造攻击(CSRF) Cookie攻击 重定向攻击</p>
</li>
<li><p>http是tcp还是udp  是哪一层协议<br><a href="https://www.zhihu.com/question/20085992">https://www.zhihu.com/question/20085992</a><br>HTTP&#x2F;1.1 和 HTTP&#x2F;2 都是基于 TCP 传输协议的，而 HTTP&#x2F;3 是基于 UDP 传输协议的<br>HTTP是应用层</p>
</li>
<li><p>TCP和UDP区别<br><a href="https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html">https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html</a><br>TCP：可靠传输、有连接、只支持单播传输（点对点传输）<br>UDP：不可靠传输、无连接（不需要三次握手就可以发送数据）、多播广播单播传输方式、头部开销小</p>
</li>
<li><p>get post区别 ，get在不同浏览器中的最大长度<br><a href="https://segmentfault.com/a/1190000023940344">https://segmentfault.com/a/1190000023940344</a><br><a href="https://blog.csdn.net/qq_32320807/article/details/83022211">https://blog.csdn.net/qq_32320807/article/details/83022211</a></p>
</li>
<li><p>闭包理解 闭包的好处坏处</p>
</li>
<li><p>项目中遇到的难点</p>
</li>
<li><p>怎么设置cookie的有效时间(Max-Age)和过期时间(Expires) ，代码是啥<br>setMaxAge(0)</p>
</li>
<li><p>cookie localstorage seesionstorage区别<br><a href="https://blog.csdn.net/jiang7701037/article/details/89118086">https://blog.csdn.net/jiang7701037/article/details/89118086</a><br><a href="https://jerryzou.com/posts/cookie-and-web-storage/">https://jerryzou.com/posts/cookie-and-web-storage/</a><br>三者都是再浏览器本地存储数据，三者都会有XSS注入风险<br>cookie: 4kb；服务端写入时就设置了过期时间；登录信息或者token<br>localstorage: 5M；前端写入，永久保存，除非手动清除；存储不易变动的数据，减轻服务器的压力<br>seesionstorage: 5M；前端写入，刷新页面还存在，窗口关闭就没了；检测用户是否是刷新进入页面，如音乐播放器恢复播放进度条的功能</p>
</li>
</ol>
<h2 id="北森云二面"><a href="#北森云二面" class="headerlink" title="北森云二面"></a>北森云二面</h2><p>链接：<a href="https://www.nowcoder.com/discuss/958653?source_id=discuss_experience_nctrack&amp;channel=-1">https://www.nowcoder.com/discuss/958653?source_id=discuss_experience_nctrack&amp;channel=-1</a></p>
<p>一面忘记记录了<br>二面 2022.5.11</p>
<ol>
<li>轮播图实现  定时器或者动画做<br><a href="https://www.cnblogs.com/WindrunnerMax/p/12638005.html">https://www.cnblogs.com/WindrunnerMax/p/12638005.html</a><br><a href="https://codepen.io/monaaaaaa2544/pen/XWZEmLV">https://codepen.io/monaaaaaa2544/pen/XWZEmLV</a></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#carousel</span> &gt; <span class="selector-tag">ul</span>&#123;</span><br><span class="line">     <span class="attribute">animation</span>: switch <span class="number">10s</span> ease <span class="number">1s</span> infinite alternate; <span class="comment">/* 设定动画播放 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#carousel</span> &gt; <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">     <span class="attribute">animation-play-state</span>: paused; <span class="comment">/* 暂停动画 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> switch&#123; <span class="comment">/* 制定动画规则 */</span></span><br><span class="line">    <span class="number">0%</span>,<span class="number">13%</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">27%</span>,<span class="number">41%</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">55%</span>,<span class="number">69%</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">1200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">83%</span>,<span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">1800px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>自制一个正方形的外盒子里面九宫格排列自适应的 可以用flex或者其他<br> <a href="https://juejin.cn/post/7016495512002134024">https://juejin.cn/post/7016495512002134024</a><br> <a href="https://codepen.io/monaaaaaa2544/pen/YzeawXb">https://codepen.io/monaaaaaa2544/pen/YzeawXb</a></p>
</li>
<li><p>项目用什么打包webpak打包原理 配置写过吗里面包含什么东西   如果import a from b  import b from a怎么处理的</p>
</li>
<li><p>输入网址发生了啥 dns全称原理 arp哪层协议 原理作用<br> <a href="https://segmentfault.com/a/1190000012092552">https://segmentfault.com/a/1190000012092552</a><br> 输入地址-浏览器通过DNS查询域名所对应的IP地址-建立TCP连接-发送HTTP请求-服务器处理请求并返回响应结果-渲染页面<br> dns全称：域名系统 Domain Name System。输入域名之后，首先在本地的Hosts查找是否有相应的域名：IP对应关系，如果没有就去找DNS服务器，DNS服务器最终会告知IP地址是多少</p>
 <img src='https://image-static.segmentfault.com/160/418/1604181361-5a1397cca5644' />

<p> ARP协议：属于IP层协议，是根据IP地址获取物理地址（MAC）的协议，它可以解决同一个局域网内主机或路由器的IP地址和MAC地址的映射问题</p>
</li>
<li><p>前后端分离原理 为啥要分离<br><a href="https://zhuanlan.zhihu.com/p/147659178">https://zhuanlan.zhihu.com/p/147659178</a><br>核心思想是前端HTML页面通过AJAX调用后端的RESTFUL API接口并使用JSON数据进行交互</p>
</li>
</ol>
<p>前端负责视图View和控制层Controller<br>后端负责Model层，进行业务、数据处理<br>前端的Controller层使用Node实现，Node在服务端和客户端的中间，进行数据的二次加工或者渲染好页面，把渲染好的HTML和处理好的数据直接发给客户端，这样便提升了客户端性能</p>
<ol start="6">
<li>vue的好处<br><a href="https://www.jianshu.com/p/552eb8edfbbb">https://www.jianshu.com/p/552eb8edfbbb</a></li>
</ol>
<p>7 跨域问题原理 cors nginx反向代理 及其原理<br>8. localstorage sessionstorage cookie区别<br>9 cookie和localstorage容量区别<br>10怎么设置localstorage 过期时间 自动删除它<br>11了解react吗<br>12 数据结构有哪些<br>13 flex布局父元素 子元素有哪些 什么含义 flex:1什么意思</p>
<ol start="14">
<li>为啥要用虚拟dom  diff算法对比的啥 diff原理<br>渲染真实的DOM很消耗性能。虚拟DOM好于真实DOM，因为真实dom在渲染过程中会造成dom的重排和重绘，虚拟DOM只会渲染局部，性能更好</li>
</ol>
<p>15了解grid布局吗</p>
<h2 id="前端面经题库"><a href="#前端面经题库" class="headerlink" title="前端面经题库"></a>前端面经题库</h2><p><a href="https://www.nowcoder.com/exam/interview/detail?questionClassifyId=0&amp;questionId=2412338&amp;questionJobId=156&amp;type=1">https://www.nowcoder.com/exam/interview/detail?questionClassifyId=0&amp;questionId=2412338&amp;questionJobId=156&amp;type=1</a></p>
<ol>
<li>JS数据类型有哪些<br><a href="https://www.nowcoder.com/exam/interview/detail?questionClassifyId=0&amp;questionId=2412338&amp;questionJobId=156&amp;type=1">https://www.nowcoder.com/exam/interview/detail?questionClassifyId=0&amp;questionId=2412338&amp;questionJobId=156&amp;type=1</a><br>8种<br>基本数据类型：Number String Boolean BigInt Symbol Null Undefined<br>引用数据类型：Object</li>
</ol>
<p>基本数据类型再栈中存储，引用数据类型在堆中存储（在栈中存的是地址，得到地址后从堆中获得实体）</p>
<p>Symbol和BigInt是ES6新出的类型，BigInt涵盖的整数范围更大，Symbol创建的数据具有唯一性，可以用来做Object对象中的key</p>
<h2 id="面试日海公司"><a href="#面试日海公司" class="headerlink" title="面试日海公司"></a>面试日海公司</h2><ol>
<li>代码作用域<br>​<a href="https://fe.ecool.fun/topic/fa224d36-147a-4251-8033-dc1462e9527e?orderBy=updateTime&amp;order=desc&amp;titleKey=%E4%BD%9C%E7%94%A8%E5%9F%9F">https://fe.ecool.fun/topic/fa224d36-147a-4251-8033-dc1462e9527e?orderBy=updateTime&amp;order=desc&amp;titleKey=%E4%BD%9C%E7%94%A8%E5%9F%9F</a></li>
</ol>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>块级作用域<br>作用域链：当前作用域-》词法作用域-》全局作用域</li>
</ul>
<ol start="2">
<li><p>TS 和JS区别<br><a href="https://fe.ecool.fun/topic/041f15e1-e0a7-450b-846c-a3078bc791c1?orderBy=updateTime&amp;order=desc&amp;tagId=19">https://fe.ecool.fun/topic/041f15e1-e0a7-450b-846c-a3078bc791c1?orderBy=updateTime&amp;order=desc&amp;tagId=19</a><br>TS是JS的超集，可以被编译成JS；静态类型检查，在没运行的时候进行；代码可读性更好；</p>
</li>
<li><p>css3的新特征<br><a href="https://fe.ecool.fun/topic/9083d1ed-fedc-4aec-ba50-df836e983e55?orderBy=updateTime&amp;order=desc&amp;titleKey=css3">https://fe.ecool.fun/topic/9083d1ed-fedc-4aec-ba50-df836e983e55?orderBy=updateTime&amp;order=desc&amp;titleKey=css3</a></p>
</li>
</ol>
<ul>
<li>盒子模型<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">设置<span class="attribute">box-sizing</span>:border-box https://www.w3schools.com/css/tryit.asp?filename=trycss3_box-sizing_old</span><br></pre></td></tr></table></figure></li>
<li>nth-child(2)</li>
<li>box-shadow</li>
<li>flex grid布局</li>
<li>背景属性</li>
<li>transition过渡 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: <span class="built_in">width</span>(属性) <span class="number">2s</span>(时间)</span><br><span class="line">https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition1</span><br></pre></td></tr></table></figure></li>
<li>transform转换<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>)</span><br><span class="line"> https://www.runoob.com/try/try.php?filename=trycss3_transform</span><br></pre></td></tr></table></figure></li>
<li>animation动画<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">animation</span>: name <span class="number">5s</span> infinite; <span class="keyword">@keyframes</span> name&#123; <span class="selector-tag">from</span>&#123;<span class="attribute">left</span>: <span class="number">0px</span>&#125; <span class="selector-tag">to</span>&#123;<span class="attribute">left</span>: <span class="number">200px</span>&#125;&#125;</span><br><span class="line"> https://www.runoob.com/try/try.php?filename=trycss3_animation</span><br></pre></td></tr></table></figure></li>
<li>媒体查询<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span>(<span class="attribute">max-width</span>: <span class="number">300px</span>)&#123; <span class="selector-tag">body</span>&#123; <span class="attribute">background</span>: green&#125;&#125; </span><br><span class="line">https://www.runoob.com/try/try.php?filename=trycss3_media_example1</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li><p>数据结构有哪些？<br><a href="https://fe.ecool.fun/topic/e00b6fcb-fb55-435f-ac74-687734871111?orderBy=updateTime&amp;order=desc&amp;titleKey=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">https://fe.ecool.fun/topic/e00b6fcb-fb55-435f-ac74-687734871111?orderBy=updateTime&amp;order=desc&amp;titleKey=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84</a><br>栈、队列、链表、数组：连续的存储单元、树、图、堆、散列表<br>Set和Map数据结构：Set集合没有重复元素、Map字典类似于哈希表——<a href="https://fe.ecool.fun/topic/4232c372-316f-4a53-99b9-6d9299b7e91f?orderBy=updateTime&amp;order=desc&amp;titleKey=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">https://fe.ecool.fun/topic/4232c372-316f-4a53-99b9-6d9299b7e91f?orderBy=updateTime&amp;order=desc&amp;titleKey=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84</a></p>
</li>
<li><p>OSI七层协议？传输层到网络层增加了什么？<br>应用层（HTTP）、表示层、会话层、传输层（TCP、UDP）、网络层（IP）、数据链路层、物理层　<a href="https://zhuanlan.zhihu.com/p/32059190">https://zhuanlan.zhihu.com/p/32059190</a></p>
</li>
<li><p>二叉树跟数组和链表结构有什么不同？从删除和添加考虑　<br><a href="https://www.cnblogs.com/MrListening/p/5782752.html">https://www.cnblogs.com/MrListening/p/5782752.html</a></p>
</li>
<li><p>怎么看待加班<br>首先如果加班是因为我个人效率低的话，我会提高工作效率，如果是因为公司项目紧急为了公司的效益我也会选择加班；赶进度时，可以为了工作加班；</p>
</li>
<li><p>平时会自己去学新技术吗<br>因为前端技术更新迭代比较快，我会经常关注一些大牛的动态了解新技术，比如Anthony fu，他是vite　unocss、 <a href="https://vueuse.org/">Vueuse</a>　的核心团队成员，我关注了他的B站</p>
</li>
<li><p>为什么选择前端<br><a href="https://bytetalk.fm/posts/episode-6/">https://bytetalk.fm/posts/episode-6/</a><br>成就感：前端的Feedback Loop 很短；网页天然跨端，可以很快分享给朋友；</p>
</li>
<li><p>this的指向<br><a href="https://fe.ecool.fun/topic/33363940-179b-4ae3-9cd3-7bf0a5619df9?orderBy=updateTime&amp;order=desc&amp;titleKey=this">https://fe.ecool.fun/topic/33363940-179b-4ae3-9cd3-7bf0a5619df9?orderBy=updateTime&amp;order=desc&amp;titleKey=this</a></p>
</li>
<li><p>all&#x2F;apply&#x2F;bind<br><a href="https://fe.ecool.fun/topic/8d391a9c-0573-4edd-bd5d-84b9af70bad5?orderBy=updateTime&amp;order=desc&amp;titleKey=bind">https://fe.ecool.fun/topic/8d391a9c-0573-4edd-bd5d-84b9af70bad5?orderBy=updateTime&amp;order=desc&amp;titleKey=bind</a></p>
</li>
</ol>
<p>三者都可以改变this指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">apply</span>(obj, [<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//传入参数是一个数组</span></span><br><span class="line"><span class="title function_">call</span>(obj, <span class="number">1</span>, <span class="number">2</span>)<span class="comment">//传入参数是参数列表</span></span><br><span class="line"><span class="keyword">let</span> bindFn=<span class="title function_">bind</span>(obj)<span class="comment">//返回一个函数，需要再次调用</span></span><br><span class="line"><span class="title function_">bindFn</span>(<span class="number">1</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
