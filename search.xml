<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Latex标签总结</title>
    <url>/2022/03/16/Latex%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Latex标签总结</p>
<span id="more"></span>

<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vspace&#123;2.5cm&#125; 垂直间距</span><br><span class="line">\hspace&#123;2.5cm&#125; 水平间距</span><br></pre></td></tr></table></figure>

<h2 id="插入参考文献"><a href="#插入参考文献" class="headerlink" title="插入参考文献"></a>插入参考文献</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\bibliographystyle&#123;IEEEtran&#125;   //IEEEtran为给定模板格式定义文件名</span><br><span class="line"></span><br><span class="line">\bibliography&#123;ref&#125;           //ref为.bib文件名</span><br></pre></td></tr></table></figure>

<h2 id="插入算法"><a href="#插入算法" class="headerlink" title="插入算法"></a>插入算法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\usepackage&#123;algorithm&#125;  </span><br><span class="line">\usepackage&#123;algorithmicx&#125;  </span><br><span class="line">\usepackage&#123;algpseudocode&#125;</span><br></pre></td></tr></table></figure>
<p>不要再使用algorithmic，使用如上三个就可以</p>
<h2 id="插入图片及排版方法"><a href="#插入图片及排版方法" class="headerlink" title="插入图片及排版方法"></a>插入图片及排版方法</h2><h3 id="跨栏放置图片"><a href="#跨栏放置图片" class="headerlink" title="跨栏放置图片"></a>跨栏放置图片</h3><p>在论文排版为双栏时，需要跨栏放置图片，只需要在 <code>\begin&#123;figure&#125;</code> 和 <code>&#123;\end&#123;figure&#125;&#125;</code> 上带星号 <code>*</code> 即可。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a herf='https://blog.csdn.net/qq_31347869/article/details/103832190' >LaTex笔记一：图片的插入及排版方法</a> </p>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2022/03/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一些常用的Linux命令</p>
<span id="more"></span>


<h3 id="查看gpu资源使用情况"><a href="#查看gpu资源使用情况" class="headerlink" title="查看gpu资源使用情况"></a>查看gpu资源使用情况</h3><p>watch -n1 gpustat -cpu </p>
<h3 id="查看文件目录下的文件数有多少"><a href="#查看文件目录下的文件数有多少" class="headerlink" title="查看文件目录下的文件数有多少"></a>查看文件目录下的文件数有多少</h3><p>ls -lR| grep “^-“ | wc -l</p>
<h3 id="解压文件到一个文件夹下"><a href="#解压文件到一个文件夹下" class="headerlink" title="解压文件到一个文件夹下"></a>解压文件到一个文件夹下</h3><p>tar -xvf 文件名   </p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>mv 起始路径 目标路径</p>
<h3 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h3><p>mv 文件名 文件名</p>
<h3 id="把本地的jpeg文件拷贝到服务器上的ISIC目录下"><a href="#把本地的jpeg文件拷贝到服务器上的ISIC目录下" class="headerlink" title="把本地的jpeg文件拷贝到服务器上的ISIC目录下"></a>把本地的jpeg文件拷贝到服务器上的ISIC目录下</h3><p>scp -r D:&#x2F;各种文档&#x2F;研究生&#x2F;代码&#x2F;data&#x2F;jpeg&#x2F; <a href="mailto:&#120;&#105;&#110;&#x79;&#x75;&#97;&#x6e;&#64;&#49;&#x37;&#x32;&#46;&#x33;&#x31;&#x2e;&#x32;&#50;&#x36;&#x2e;&#49;&#53;&#54;">&#120;&#105;&#110;&#x79;&#x75;&#97;&#x6e;&#64;&#49;&#x37;&#x32;&#46;&#x33;&#x31;&#x2e;&#x32;&#50;&#x36;&#x2e;&#49;&#53;&#54;</a>:&#x2F;home&#x2F;data&#x2F;xinyuan&#x2F;adv_train_wbc&#x2F;data&#x2F;ISIC&#x2F; </p>
<h3 id="把192-168-0-10机器上的source-txt文件拷贝到本地的-x2F-home-x2F-work目录下"><a href="#把192-168-0-10机器上的source-txt文件拷贝到本地的-x2F-home-x2F-work目录下" class="headerlink" title="把192.168.0.10机器上的source.txt文件拷贝到本地的&#x2F;home&#x2F;work目录下"></a>把192.168.0.10机器上的source.txt文件拷贝到本地的&#x2F;home&#x2F;work目录下</h3><p>scp <a href="mailto:&#x77;&#x6f;&#x72;&#x6b;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#48;&#46;&#x31;&#x30;">&#x77;&#x6f;&#x72;&#x6b;&#x40;&#x31;&#57;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#48;&#46;&#x31;&#x30;</a>:&#x2F;home&#x2F;work&#x2F;source.txt &#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="把192-168-0-10机器上的source-txt文件拷贝到192-168-0-11机器的-x2F-home-x2F-work目录下"><a href="#把192-168-0-10机器上的source-txt文件拷贝到192-168-0-11机器的-x2F-home-x2F-work目录下" class="headerlink" title="把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的&#x2F;home&#x2F;work目录下"></a>把192.168.0.10机器上的source.txt文件拷贝到192.168.0.11机器的&#x2F;home&#x2F;work目录下</h3><p>scp <a href="mailto:&#119;&#x6f;&#x72;&#107;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#48;&#46;&#x31;&#48;">&#119;&#x6f;&#x72;&#107;&#x40;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#x2e;&#48;&#46;&#x31;&#48;</a>:&#x2F;home&#x2F;work&#x2F;source.txt <a href="mailto:&#x77;&#x6f;&#114;&#x6b;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x30;&#x2e;&#49;&#x31;">&#x77;&#x6f;&#114;&#x6b;&#64;&#49;&#x39;&#50;&#x2e;&#49;&#x36;&#56;&#x2e;&#x30;&#x2e;&#49;&#x31;</a>:&#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="拷贝文件夹，加-r参数-拷贝整个目录"><a href="#拷贝文件夹，加-r参数-拷贝整个目录" class="headerlink" title="拷贝文件夹，加-r参数(拷贝整个目录)"></a>拷贝文件夹，加-r参数(拷贝整个目录)</h3><p>scp -r &#x2F;home&#x2F;work&#x2F;sourcedir <a href="mailto:&#119;&#x6f;&#x72;&#107;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#48;&#46;&#49;&#48;">&#119;&#x6f;&#x72;&#107;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#x36;&#x38;&#46;&#48;&#46;&#49;&#48;</a>:&#x2F;home&#x2F;work&#x2F;   </p>
<h3 id="png-jpg图像转换为矢量图-eps-c保证转换后保证图像彩色"><a href="#png-jpg图像转换为矢量图-eps-c保证转换后保证图像彩色" class="headerlink" title=".png .jpg图像转换为矢量图 .eps -c保证转换后保证图像彩色"></a>.png .jpg图像转换为矢量图 .eps <code>-c</code>保证转换后保证图像彩色</h3><p>bmeps -c .\diff_adv_clean_pgd4.png diff.eps  </p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3项目时出过的错</title>
    <url>/2022/03/12/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8TS%E6%B3%A8%E6%84%8F/</url>
    <content><![CDATA[<p>写Vue3项目时出过的错</p>
<span id="more"></span>

<ol>
<li><p>store中的变量都命成响应式</p>
</li>
<li><p>prop传入的值直接使用，不用用变量接收</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 以下是错误的 --&gt;</span><br><span class="line">&lt;li v-for=&quot;tag in tagList&quot; :key=&quot;tag.id&quot;</span><br><span class="line">                            :class=&quot;&#123;selected: selectedTags.indexOf(tag)&gt;=0&#125;&quot;</span><br><span class="line">                            @click=&quot;toggle(tag)&quot;&gt;</span><br><span class="line">                        &#123;&#123;tag.name&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">const tagList=reactive&lt;any&gt;(props.tags) </span><br></pre></td></tr></table></figure>
</li>
<li><p>@绑定的方法，不用传入值，直接用event.target.xx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function inputContent(evt: MouseEvent)&#123;</span><br><span class="line">    input = evt.target.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Vue3中父子组件传值</title>
    <url>/2022/03/09/Vue3%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
    <content><![CDATA[<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><ul>
<li>父组件给子组件传值用defineProps</li>
<li>子组件给父组件传值用defineEmits<span id="more"></span></li>
</ul>
<h2 id="二、父组件给子组件传值"><a href="#二、父组件给子组件传值" class="headerlink" title="二、父组件给子组件传值"></a>二、父组件给子组件传值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;Types v-model:type=&quot;record.type&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">const props=defineProps(&#123;</span><br><span class="line">    type: String</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(props.type)</span><br></pre></td></tr></table></figure>

<h2 id="三、子组件给父组件传值"><a href="#三、子组件给父组件传值" class="headerlink" title="三、子组件给父组件传值"></a>三、子组件给父组件传值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;Types v-model:type=&quot;record.type&quot; /&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">const emit=defineEmits&lt;&#123;</span><br><span class="line">    (event: &#x27;update:type&#x27;, types: string): void</span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href='https://mp.weixin.qq.com/s/pUYCDIIk4GQ5DeIjAuEdBQ'>Vue3.2 中的 setup 语法糖，保证你看的明明白白！</a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Web中数据的保存</title>
    <url>/2022/03/09/Web%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h2 id="一、几种数据保存方法"><a href="#一、几种数据保存方法" class="headerlink" title="一、几种数据保存方法"></a>一、几种数据保存方法</h2><ul>
<li>LocalStorage</li>
<li>Vuex<span id="more"></span></li>
</ul>
<h2 id="二、LocalStorage"><a href="#二、LocalStorage" class="headerlink" title="二、LocalStorage"></a>二、LocalStorage</h2><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">localStorage.setItem(&quot;name&quot;, JSON.stringify(data))</span><br></pre></td></tr></table></figure>
<p>注意这里保存的data是字符串格式，所以需要用<code>JSON.stringify()</code>转换成字符格式</p>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSON.parse(localStorage.getItem(localStorageKeyName))</span><br></pre></td></tr></table></figure>
<p>读取数据时也需要用<code>JSON.parse()</code>解析字符串</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TS语法</title>
    <url>/2022/03/10/TS%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>总结TS的语法</p>
<span id="more"></span>



<h2 id="推荐查阅"><a href="#推荐查阅" class="headerlink" title="推荐查阅"></a>推荐查阅</h2><p><a href='https://www.tslang.cn/docs/handbook/basic-types.html'>TS官方文档</a><br><a href='https://mp.weixin.qq.com/s/pQNCLOZWsqXi6NScyWhdEg'>微信公众号的总结</a><br><a href='https://time.geekbang.org/course/detail/211-128376'>TS开发实战</a><br><a href='https://mp.weixin.qq.com/s/pUYCDIIk4GQ5DeIjAuEdBQ'>Vue3.2 中的 setup 语法糖，保证你看的明明白白！</a></p>
<h2 id="TS基础"><a href="#TS基础" class="headerlink" title="TS基础"></a>TS基础</h2><p><a href="https://imgtu.com/i/bh2YsP"><img src="https://s1.ax1x.com/2022/03/10/bh2YsP.md.png" alt="bh2YsP.md.png"></a></p>
<h2 id="TS介绍"><a href="#TS介绍" class="headerlink" title="TS介绍"></a>TS介绍</h2><p>Typescript是静态弱类型语言。</p>
<ul>
<li>静态是指在编译是会检查变量类型，动态是在执行时才检查，所以动态类型的语言运行速度慢</li>
<li>弱类型是指当一个变量已经被定义了类型，但是可根据环境变化自动转换，不需要强制转换</li>
</ul>
<p>关于各种语言类型的分类可查阅：<a href="https://www.zhihu.com/question/19918532">https://www.zhihu.com/question/19918532</a></p>
<h3 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h3><p>JS八种内置类型：string、number、Boolean、bigint、null、undefined、symbol、object<br>ECMAScript 的内置对象：Array Date Error<br>DOM 和 BOM: HTMLElement、NodeList、MouseEvent<br>TS 核心库的定义文件: Math.pow addEventListener</p>
<h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><p>interface是TS设计出来用于定义对象类型的</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>public: 公有的。能被实例化、子类继承<br>private: 私有的。只属于这个类自己，它的实例和子类都访问不到<br>protected：被保护的。子类可以访问，实例不能访问<br>static：静态属性。类上的一些常量，实例和子类都不能访问<br>抽象类：只能被继承不能实例化的类<br>抽象方法：必须在子类中实现<br>多态：父类定义一个抽象方法，在多个子类中有不同的实现</p>
<h3 id="接口和类的关系"><a href="#接口和类的关系" class="headerlink" title="接口和类的关系"></a>接口和类的关系</h3><ol>
<li>类实现接口<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface StudentInterface&#123;</span><br><span class="line">    sayName(): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Student implements StudentInterface&#123;</span><br><span class="line">    sayName()&#123;</span><br><span class="line">        console.log(&#x27;say Name&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="TS进阶"><a href="#TS进阶" class="headerlink" title="TS进阶"></a>TS进阶</h2><p><a href="https://imgtu.com/i/bHbU8H"><img src="https://s1.ax1x.com/2022/03/12/bHbU8H.md.png" alt="bHbU8H.md.png"></a></p>
<h2 id="TS实战"><a href="#TS实战" class="headerlink" title="TS实战"></a>TS实战</h2><h3 id="Vue3-todoList"><a href="#Vue3-todoList" class="headerlink" title="Vue3 todoList"></a>Vue3 todoList</h3><p>涉及知识</p>
<ul>
<li>Vue3</li>
<li>script setup</li>
<li>ref</li>
<li>computed</li>
<li>条件渲染和列表渲染</li>
<li>数据绑定和 v-model</li>
<li>事件</li>
</ul>
<p>TS</p>
<ul>
<li>基础类型</li>
<li>接口</li>
<li>泛型</li>
<li>TS 结合 Vue3</li>
</ul>
<p>要实现的功能</p>
<ul>
<li>新增待办事项</li>
<li>删除待办事项</li>
<li>全选和取消全选功能</li>
<li>清理已做事项</li>
</ul>
]]></content>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>vim快捷键</title>
    <url>/2022/03/21/vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>vim快捷键总结</p>
<span id="more"></span>

<p><a href='https://coolshell.cn/articles/5426.html'>简明Vim练级攻略</a><br><a href='https://muyuuuu.github.io/2021/08/28/vim-learn/'>关于六天掌握 Vim 这件事</a><br><a href='https://chengjingchao.com/2020/06/13/VS-Code-%E4%B8%8E-Vim'>Vscode和Vim</a></p>
<h2 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h2><p>dd 删除一行<br>i 切换insert模式<br>x 删除一个字符<br>u 撤销删除<br>:wq 保存+退出<br>hljk 左右上下<br>:help [commend] 显示相关命令帮助<br>个人配置后：更快速的移动 normal 模式下 J &#x3D;&gt; 5j, K &#x3D;&gt; 5k</p>
<h2 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h2><p>a 在光标后插入<br>o 在当前行后面插入新行<br>O 当前行前面插入新行<br>cw 替换从光标所在位置后到一个单词结尾的字符</p>
<p>p 粘贴剪切板<br>yy 复制当前行</p>
<p>:e [path] 打开一个文件<br>:q! 退出不保存</p>
<p>0 光标移动到行首<br>$ 光标移动到行尾</p>
<p>v进入visual模式，光标移动进行选中，y进行复制，p进行粘贴</p>
<h2 id="day-3"><a href="#day-3" class="headerlink" title="day 3"></a>day 3</h2><p>. 重复上一次命令<br>2dd 删除2行<br>10p 粘贴文本10次</p>
<p>gg 移动到文件开头<br>G 移动到文件末尾<br>NG 移动到第N行<br>gd 跳转到定义<br>gh 相当于鼠标悬停到光标所在位置</p>
<p>ctrl+f 向下翻页<br>ctrl+b 向上翻页<br>ctrl+e 逐行向下翻页<br>ctrl+y 逐行向上翻页</p>
<p>b 上一个单词开头<br>e 当前单词结尾</p>
<p>% 匹配括号移动<br>* 匹配光标当前单词，移动光标到下一个单词</p>
<p><code>0y$</code> 从行头复制到行尾<br>ye 从当前位置拷贝到本单词最后一个字符</p>
<p>gU 变大写<br>gu 变小写</p>
<h2 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h2><p>ye 复制光标后的单词<br>yl 复制光标后的字符<br>yh 复制光标前的字符</p>
<p>dd 删除整行<br>dw 删除当前单词</p>
<h2 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h2><p>jj 个人配置的esc键<br>xx 个人配置的：再行末添加</p>
<p>zz 当前行放在页面中间<br>H(head) 移动到屏幕顶部<br>M(middle) 移动到屏幕中间</p>
<h2 id="Vimium"><a href="#Vimium" class="headerlink" title="Vimium"></a>Vimium</h2><p><a href="https://zhuanlan.zhihu.com/p/64533566">https://zhuanlan.zhihu.com/p/64533566</a><br><a href="https://linuxfstab.com/2020/03/22/vimium/">https://linuxfstab.com/2020/03/22/vimium/</a><br>T 搜索标签页<br>f+[] 打开网页<br>O 搜索<br>H 返回上一页</p>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>go语言</title>
    <url>/2022/04/20/go%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>go语言</p>
<span id="more"></span>

<h2 id="go学习资料"><a href="#go学习资料" class="headerlink" title="go学习资料"></a>go学习资料</h2><p><a href='https://time.geekbang.org/course/intro/100024001?tab=catalog'>极客时间Go语言开发入门到实战</a><br><a href='https://gitee.com/geektime-geekbang/go_learning/tree/master/code'>极客时间 github go-learning</a><br><a href='https://gobyexample-cn.github.io/'>Go by Example</a><br><a href='https://github.com/monaaaaaa2544/go-learning/tree/main'>mona github go-learning</a><br><a href='https://learnku.com/docs/the-way-to-go/interact-with-other-languages/3581'>go 入门指南</a></p>
<h2 id="go介绍"><a href="#go介绍" class="headerlink" title="go介绍"></a>go介绍</h2><p>简单、并发编程、内存管理、垃圾回收机制、静态强类型（不支持隐式类型转换）语言、go的关键字很少：28个、go被称为区块链开发语言</p>
<h2 id="go知识点"><a href="#go知识点" class="headerlink" title="go知识点"></a>go知识点</h2><p>os.Args[1] 获取命令行参数<br>os.Exit(-1) 退出<br>a,b&#x3D;b,a 交换两个值<br>go test -v 【文件名】打印测试结果<br>go不支持指针运算<br>go无法进行隐式类型转换<br>go没有前置++ –<br>go中的比较是比较值而不是引用<br>iota常量<br>&amp;^按位置零<br>循环语句 for<br>条件语句 if switch</p>
<h6 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h6><p>数组和切片的声明<br>切片不需要说明长度: s :&#x3D;[]int{1,2,3}；数组声明需要指定元素类型及元素个数: a :&#x3D;[…]int{1,2,3}<br>make创建切片：make([]int, 1, 5)<br>切片包含：指针、length、cap<br>切片不可以比较，数组可以比较</p>
<h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><p>Map的声明：make(map[string]int, 10)<br>Map遍历：for k,v:&#x3D; range m1{}<br>go中没有Set，用Map实现Set</p>
<h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p>声明String字符串：s:&#x3D;’asdfasdf’<br>常用字符串函数：strings、strconv<br>字符串分割\拼接：strings.Split、strings.Join<br>字符串类型转换: strconv.Atoi、strconv.Itoa</p>
<h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>Defer<br>函数可返回多个值</p>
<h6 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h6><p>go 不支持继承<br>结构体定义<br>接口实现</p>
<h6 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h6><p>Error()<br>Panic 后会执行defer<br>os.Exit() 后不会执行defer<br>recover panic</p>
<h6 id="包和依赖管理"><a href="#包和依赖管理" class="headerlink" title="包和依赖管理"></a>包和依赖管理</h6><p>构建可复用模块<br>go mod init<br>init()<br>推荐包：concurrent-map glide(包管理工具)<br>下载命令：go get -u 地址</p>
<h6 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h6><p>协程机制和传统线程机制的区别<br>开启协程：go func(){}()<br>共享内存并发机制：互斥锁（sync.Mutex）WaitGroup</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/2022/03/22/leetcode/</url>
    <content><![CDATA[<p>刷题记录</p>
<span id="more"></span>

<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href='https://drive.google.com/drive/folders/1OW2PlBQJJO1TFZq06qufW67jyuGM_Tws?usp=sharing'>左程云算法基础</a><br><a href='https://drive.google.com/file/d/1_DOFkrVhQCP3cLgeYzac1SLvin9iMD5f/view?usp=sharing'>程序员代码面试指南 IT名企算法与数据结构题目最优解 ,左程云著</a><br><a href='https://labuladong.github.io/algo/'>- labuladong算法小炒</a></p>
<h2 id="刷题顺序："><a href="#刷题顺序：" class="headerlink" title="刷题顺序："></a>刷题顺序：</h2><ul>
<li><a href='https://leetcode-cn.com/study-plan/algorithms/?progress=7mrgdjd'>算法20天：</a></li>
<li><a href='https://leetcode-cn.com/study-plan/lcof/?progress=7mrtbrg'>剑指offer1：</a></li>
<li><a href='https://leetcode-cn.com/problemset/all/?listId=xb9nqhhg&page=1'>剑指第二版：</a></li>
<li><a href='https://leetcode-cn.com/problemset/all/?listId=e8X3pBZi&page=1'>剑指专项突击：</a></li>
<li><a href='https://www.nowcoder.com/study/vod/1'>牛客刷题集合</a></li>
<li><a href='https://www.acwing.com/problem/'>AcWing</a></li>
<li><a href='https://docs.google.com/spreadsheets/d/1yRCOJ8KysRVkq0O9IlDriT01tC6lzPapmFO4PCmDJQA/edit#gid=126913158'>花花酱 LeetCode Problem List 题目列表</a><br>程序员算法面试指南左程云</li>
</ul>
<h2 id="python-刷题常用模块"><a href="#python-刷题常用模块" class="headerlink" title="python 刷题常用模块"></a>python 刷题常用模块</h2><p><a href='https://blog.csdn.net/Shenpibaipao/article/details/105873407'>[Python][刷题常用模块]用Python刷题，这一篇就够了</a><br><a href="https://blog.nowcoder.net/n/b4d00041304748b1a522275243fd87e6">https://blog.nowcoder.net/n/b4d00041304748b1a522275243fd87e6</a><br><a href="https://xdren69.github.io/2021/03/31/leetcode-python/">https://xdren69.github.io/2021/03/31/leetcode-python/</a><br><a href="http://www-quic.zhihu.com/question/392867890">http://www-quic.zhihu.com/question/392867890</a><br><a href='https://codingdict.com/article/4843'>CodingDict</a></p>
<ol>
<li><p>max(a, b)</p>
</li>
<li><p>队列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; import queue </span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br><span class="line">&gt; q=queue.Queue(5)</span><br><span class="line">&gt;</span><br><span class="line">&gt; q.put(123)</span><br><span class="line">&gt;</span><br><span class="line">&gt; q.get()</span><br></pre></td></tr></table></figure></li>
<li><p>优先级队列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;import queue</span><br><span class="line">&gt;</span><br><span class="line">&gt;q=queue.PriorityQueue()</span><br><span class="line">&gt;</span><br><span class="line">&gt;同上put get</span><br><span class="line">&gt;</span><br><span class="line">&gt;结构相当于一个堆</span><br></pre></td></tr></table></figure></li>
<li><p>栈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;</span><br><span class="line">&gt;from collections import deque</span><br><span class="line">&gt;</span><br><span class="line">&gt;s=deque()</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.append(1)</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.pop()</span><br><span class="line">&gt;</span><br><span class="line">&gt;或者用LifoQueue</span><br><span class="line">&gt;</span><br><span class="line">&gt;from queue</span><br><span class="line">&gt;</span><br><span class="line">&gt;s=queue.LifoQueue()</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.put(1)</span><br><span class="line">&gt;</span><br><span class="line">&gt;s.get()</span><br></pre></td></tr></table></figure>
</li>
<li><p>有时候用python报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UnboundLocalError: local variable &#x27;sum&#x27; referenced before assignment</span><br><span class="line">    sum+=root.val</span><br><span class="line">Line 20 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root.right)</span><br><span class="line">Line 18 in traverse (Solution.py)</span><br><span class="line">    traverse(root)</span><br><span class="line">Line 27 in convertBST (Solution.py)</span><br><span class="line">    ret = Solution().convertBST(param_1)</span><br><span class="line">Line 49 in _driver (Solution.py)</span><br><span class="line">    _driver()</span><br><span class="line">Line 60 in &lt;module&gt; (Solution.py)</span><br><span class="line"></span><br><span class="line">解决方法：nonlocal 定义非定义域所在变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>python 创建二维数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr=[[<span class="number">0</span>]*<span class="number">3</span>]*<span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>python 小顶堆</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官网：https://docs.python.org/zh-cn/3/library/heapq.html</span><br><span class="line">from heapq import *</span><br><span class="line"></span><br><span class="line">heap=[]</span><br><span class="line">heappush(heap, 1)</span><br><span class="line">heappop(heap) # 0</span><br><span class="line">print(len(heap)) # 堆大小 </span><br><span class="line">print(heap[0]) # 栈顶最小元素</span><br><span class="line">//将列表转换为堆</span><br><span class="line">heap2 = [5, 8, 0, 4, 6, 7]</span><br><span class="line">heapify(heap2)</span><br><span class="line">print(heap2)   #[0, 4, 5, 8, 6, 7]</span><br><span class="line"></span><br><span class="line">//前n个最大的或前n个最小的元素</span><br><span class="line">lst = [5, 8, 0, 4, 6, 7]</span><br><span class="line">print(nsmallest(3, lst))</span><br><span class="line">print(nlargest(3, lst))</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>python 字典（哈希表）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict=&#123;&#125;</span><br><span class="line"></span><br><span class="line">dict[&#x27;Age&#x27;]=18</span><br></pre></td></tr></table></figure>
</li>
<li><p>python 数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr=[]</span><br><span class="line"></span><br><span class="line">arr.push(3)</span><br><span class="line">arr.pop()</span><br><span class="line">arr.pop(0) //删除第一个元素</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>python 字符串</p>
</li>
</ol>
   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;sadfasdf,asdfa&#x27;</span><br><span class="line"></span><br><span class="line">s.split(&#x27;,&#x27;)</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>python 设定最大值最小值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.maxsize python3中设置最大值</span><br><span class="line">-sys.maxsize-1 python3中设置最小值</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h2><p>算法动画：<a href="https://github.com/MisterBooo/Article">https://github.com/MisterBooo/Article</a><br>涉及算法：冒泡、插入、选择排序、快速排序、堆排序、荷兰国旗问题、小范围排序练习题、计数排序、基数排序、比较器<br>快速排序(快速选择算法)：<a href="https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ">https://mp.weixin.qq.com/s/8ZTMhvHJK_He48PpSt_AmQ</a><br><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">#215 数组中的第K个最大元素</a>——1&#x2F;小根堆的方法——2&#x2F;快速选择的方法<br><a href="https://leetcode-cn.com/problems/sort-colors/">#75 颜色分类</a>——快排法——计数排序法——双指针法<br><a href="https://leetcode-cn.com/problems/0H97ZC/">#剑指 Offer II 075 数组相对排序</a>——哈希表，计数</p>
<h2 id="数组问题"><a href="#数组问题" class="headerlink" title="数组问题"></a>数组问题</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/19/24/">https://labuladong.gitee.io/algo/2/19/24/</a><br><a href="https://leetcode-cn.com/problems/rotate-image/">#48 旋转图像</a><br><a href="https://leetcode-cn.com/problems/spiral-matrix/">#54 螺旋矩阵</a><br><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">#59 螺旋矩阵 II</a></p>
<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><h2 id="链表问题"><a href="#链表问题" class="headerlink" title="链表问题"></a>链表问题</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/18/">https://labuladong.gitee.io/algo/2/18/</a><br><a href="https://leetcode-cn.com/problems/rotate-list/">#61 旋转链表</a></p>
<h3 id="链表问题（双指针技巧）"><a href="#链表问题（双指针技巧）" class="headerlink" title="链表问题（双指针技巧）"></a>链表问题（双指针技巧）</h3><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/18/17/">https://labuladong.gitee.io/algo/2/18/17/</a><br><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/"> #21 合并两个有序链表</a>——新链表迭代法，双指针——递归法<br><a href="https://leetcode-cn.com/problems/linked-list-cycle/">#141 环形链表</a><br><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">#142 环形链表 II</a>——快慢指针<br><a href='https://blog.csdn.net/weixin_40323516/article/details/121938354'>打印两个有序链表的公共部分</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">#160 相交链表</a>——哈希表—— 双指针 ab链表相连——快慢指针 长链先走几步<br><a href="https://leetcode-cn.com/problems/7WHec2/">#剑指 Offer II 077 链表排序</a>——归并排序 快慢指针分成两条链<br><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">#876 链表的中间结点</a>——快慢指针<br><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">#19 删除链表的倒数第 N 个结点</a>—— 快慢指针——常规解法：先得到链表长度然后顺序遍历length-n次找到删除的节点</p>
<h3 id="链表问题（递归翻转链表的一部分）"><a href="#链表问题（递归翻转链表的一部分）" class="headerlink" title="链表问题（递归翻转链表的一部分）"></a>链表问题（递归翻转链表的一部分）</h3><p>算法技巧：</p>
<ul>
<li><a href="https://labuladong.gitee.io/algo/2/18/20/">https://labuladong.gitee.io/algo/2/18/20/</a></li>
<li><a href="https://labuladong.gitee.io/algo/2/18/19/">https://labuladong.gitee.io/algo/2/18/19/</a><br><a href="https://leetcode-cn.com/problems/palindrome-linked-list/"> #234 回文链表</a>——快慢指针<br><a href="https://leetcode-cn.com/problems/reverse-linked-list/">#206 反转链表</a>—— 常规解法—— 递归<br><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">#92 反转链表 II</a>—— 常规解法：截断之后，子链表反转，再拼接——递归</li>
</ul>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>算法技巧：<br><a href="https://leetcode-cn.com/problems/binary-search/">#704 二分查找</a><br><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">在排序数组中查找元素的第一个和最后一个位置</a><br><a href="https://leetcode-cn.com/problems/first-bad-version/">#278 第一个错误的版本</a><br><a href="https://leetcode-cn.com/problems/search-insert-position/">#35 搜索插入位置</a></p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/4/31/116/">https://labuladong.gitee.io/algo/4/31/116/</a><br><a href="https://leetcode-cn.com/problems/single-number/">#136 只出现一次的数字</a><br><a href="https://leetcode-cn.com/problems/missing-number/">#268 丢失的数字</a><br><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/"> #剑指 Offer 56 - I 数组中数字出现的次数</a><br><a href="https://leetcode-cn.com/problems/number-of-1-bits/">#191 位1的个数</a><br><a href="https://leetcode-cn.com/problems/power-of-two/">#231 2 的幂</a><br><a href="https://leetcode-cn.com/problems/set-mismatch/">#645 错误的集合</a></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/19/26/">https://labuladong.gitee.io/algo/2/19/26/</a><br><a href="https://leetcode-cn.com/problems/merge-sorted-array/">#88 合并两个有序数组</a><br><a href="https://leetcode-cn.com/problems/sort-an-array/">#912 排序数组</a><br><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">#315 计算右侧小于当前元素的个数</a></p>
<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树中最难的题：树形DP<br>算法技巧：二叉树很多问题可以用树形DP套路去解</p>
<h3 id="递归和非递归的方法实现二叉树的前序，中序，后序遍历"><a href="#递归和非递归的方法实现二叉树的前序，中序，后序遍历" class="headerlink" title="递归和非递归的方法实现二叉树的前序，中序，后序遍历"></a>递归和非递归的方法实现二叉树的前序，中序，后序遍历</h3><p><a href="https://segmentfault.com/a/1190000016674584">递归和非递归的方法实现二叉树的前序，中序，后序遍历</a><br>总结：二叉树的题都可以用递归或迭代两种方法解决<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">#144 二叉树的前序遍历</a><br><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">#94 二叉树的中序遍历</a></p>
<h3 id="二叉树的递归套路"><a href="#二叉树的递归套路" class="headerlink" title="二叉树的递归套路"></a>二叉树的递归套路</h3><p>判断是否搜索二叉树（BST）——中序递增<br>判断是否完全二叉树——有右无左false——宽度优先遍历<br>判断是否满二叉树——节点个数和最大深度要满足一个公式<br>判断是否平衡二叉树——左右子树高度差不超过1</p>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">98. 验证二叉搜索树</a><br><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">#104 二叉树的最大深度</a>—— 递归—— 回溯<br><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/"> #144 二叉树的前序遍历</a>——递归——回溯<br><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">#543 二叉树的直径</a>——递归——回溯<br><a href="https://leetcode-cn.com/problems/invert-binary-tree/">#226 翻转二叉树</a><br><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/"> #116 填充每个节点的下一个右侧节点指</a>——遍历三叉树<br><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/"> #114 二叉树展开为链表</a><br><a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">703 数据流中的第 K 大元素</a>——小根堆<br><a href="https://leetcode-cn.com/problems/same-tree">100. 相同的树</a>——递归 遍历<br><a href="https://leetcode-cn.com/problems/symmetric-tree">101. 对称二叉树</a><br><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes">222. 完全二叉树的节点个数</a><br><a href='https://www.nowcoder.com/questionTerminal/430180b66a7547e1963b69b1d0efbd3c'>折纸问题</a>——二叉树的中序遍历</p>
<h3 id="二叉树（序列化）"><a href="#二叉树（序列化）" class="headerlink" title="二叉树（序列化）"></a>二叉树（序列化）</h3><p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree">297. 二叉树的序列化与反序列化</a></p>
<h3 id="二叉树（后序）"><a href="#二叉树（后序）" class="headerlink" title="二叉树（后序）"></a>二叉树（后序）</h3><p><a href="https://leetcode-cn.com/problems/find-duplicate-subtrees">652. 寻找重复的子树</a></p>
<p>(未做)<a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator">341. 扁平化嵌套列表迭代器</a></p>
<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a><br><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a><br><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></p>
<h3 id="二叉树（构造）"><a href="#二叉树（构造）" class="headerlink" title="二叉树（构造）"></a>二叉树（构造）</h3><p><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">654. 最大二叉树</a><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">106. 从中序与后序遍历序列构造二叉树</a><br><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/">889. 根据前序和后序遍历构造二叉树</a><br><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></p>
<h3 id="BST（二叉搜索树）"><a href="#BST（二叉搜索树）" class="headerlink" title="BST（二叉搜索树）"></a>BST（二叉搜索树）</h3><p>算法技巧：<a href="https://labuladong.gitee.io/algo/2/20/41/">https://labuladong.gitee.io/algo/2/20/41/</a></p>
<h4 id="二叉搜索树（基本操作）"><a href="#二叉搜索树（基本操作）" class="headerlink" title="二叉搜索树（基本操作）"></a>二叉搜索树（基本操作）</h4><p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">删除二叉搜索树中的节点</a>——递归（分三种情况删除节点）<br><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">#98 验证二叉搜索树</a>——递归法：满足 min.val &lt; root.val &lt; max.val 则是二叉搜索树<br><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">#700 二叉搜索树中的搜索</a><br><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">#701 二叉搜索树中的插入操作</a></p>
<h4 id="二叉搜索树（中序遍历）"><a href="#二叉搜索树（中序遍历）" class="headerlink" title="二叉搜索树（中序遍历）"></a>二叉搜索树（中序遍历）</h4><p><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst">230. 二叉搜索树中第K小的元素</a>——思路：中序递增</p>
<ul>
<li><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">#94 二叉树的中序遍历</a></li>
<li><a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/">671. 二叉树中第二小的节点</a></li>
</ul>
<p><a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree">538. 把二叉搜索树转换为累加树</a>——中序递减<br><a href="https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree">1038. 把二叉搜索树转换为累加树</a>——同上</p>
<h3 id="二叉搜索树（构造）"><a href="#二叉搜索树（构造）" class="headerlink" title="二叉搜索树（构造）"></a>二叉搜索树（构造）</h3><p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees">96. 不同的二叉搜索树</a>——动态规划——递归分解问题<br><a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii">（未做）95. 不同的二叉搜索树 II</a></p>
<h3 id="二叉树（Git原理）"><a href="#二叉树（Git原理）" class="headerlink" title="二叉树（Git原理）"></a>二叉树（Git原理）</h3><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-ii/">1644. 二叉树的最近公共祖先 II</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iii/">1650. 二叉树的最近公共祖先 III</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree-iv/">1676. 二叉树的最近公共祖先 IV</a><br><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></p>
<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>509 斐波那契数列<br>322 零钱兑换<br>377 组合总和</p>
<p>爬楼梯<br>最长递增子序列<br>下降路径最小和</p>
<p>746 <a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/description/">使用最小花费爬楼梯</a><br>1137 第n个泰波那契数<br><a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a></p>
]]></content>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Git命令</title>
    <url>/2022/03/13/%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>记录一些常用的git命令方便查阅</p>
<span id="more"></span>

<p>git add .<br>git commit -m ‘[文字]’<br>git push 从本地推送代码到远程<br>git pull 从远程拉取代码到本地<br>git checkout [分支名] 切换到某个分支<br>git branch 查看当前分支<br>git merge [分支名] 合并分支<br>git stash：存储临时代码。<br>git reset –soft：软回溯，回退 commit 的同时保留修改内容。<br>git cherry-pick：复制 commit。<br>git revert：撤销 commit 的修改内容。<br>git reflog：记录了 commit 的历史操作。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>书籍阅读</title>
    <url>/2022/03/22/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>你不知道的js<br>阅读笔记：<a href='https://github.com/bailinlin/Awsome-Front-End-Xmind'>Awsome-Front-End-Xmind</a></p>
]]></content>
      <tags>
        <tag>book</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建Hexo+GitHubPages博客</title>
    <url>/2022/03/07/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo-GitHubPages%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>无需购买域名、配置服务器，只需要一个github账号即可搭建个人博客</p>
<span id="more"></span>

<h2 id="安装git和Node"><a href="#安装git和Node" class="headerlink" title="安装git和Node"></a>安装git和Node</h2><h2 id="安装并启动Hexo"><a href="#安装并启动Hexo" class="headerlink" title="安装并启动Hexo"></a>安装并启动Hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v </span><br><span class="line">hexo init mona_blog</span><br><span class="line">cd mona_blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h2 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new first_blog</span><br><span class="line">hexo generate 简写　hexo g</span><br><span class="line">hexo server　简写 hexo s</span><br><span class="line">hexo deploy　简写 hexo d</span><br></pre></td></tr></table></figure>

<h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><ol>
<li>修改_config.yml文件：修改并添加type repo branch的值，示例如下：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/monaaaaaa2544/monaaaaaa2544.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>安装hexo-deployer-git插件，运行<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>重新运行<code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p>
</li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol>
<li><p>安装NextT主题 <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><br>这是将Next主题下载到blog目录的themes主题下的next文件夹中。</p>
</li>
<li><p>打开站点的_config.yml配置文件，修改主题为next</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开themes下的_config.yml文件，找到Scheme Settings，Next有4种主题可选，选一个取消注释即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载插件<code>npm i hexo-renderer-swig</code><br>这里由于Hexo升级的问题，必须下载swig渲染插件</p>
</li>
<li><p>重新运行<code>hexo clean</code> &amp;&amp; <code>hexo g</code> &amp;&amp;<code>hexo d</code></p>
</li>
</ol>
<h2 id="Hexo-命令总结"><a href="#Hexo-命令总结" class="headerlink" title="Hexo 命令总结"></a>Hexo 命令总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo d </span><br><span class="line">hexo s  </span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>

<h2 id="NexT配置"><a href="#NexT配置" class="headerlink" title="NexT配置"></a>NexT配置</h2><ol>
<li>浏览页面显示当前浏览进度<br>找到_config.yml中的关键字scrollpercent, 设置为true</li>
<li>本地搜索功能</li>
</ol>
<ul>
<li>安装插件<code>npm install hexo-generator-searchdb --save</code></li>
<li>添加如下配置到_config.yml中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>修改如下参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="博客添加音乐"><a href="#博客添加音乐" class="headerlink" title="博客添加音乐"></a>博客添加音乐</h2><p>使用MeingJS<br>具体可查阅：<a href='https://blog.csdn.net/weixin_43471926/article/details/109798928'> Hexo-Fluid主题添加音乐页面</a><br><a href='https://mackvord.github.io/aplayer-dplayer/547187035.html'>Aplayer &amp; Dplayer 嵌入音频和视频</a></p>
<h2 id="Hexo博客Next主题添加统计文章阅读量、评论等功能"><a href="#Hexo博客Next主题添加统计文章阅读量、评论等功能" class="headerlink" title="Hexo博客Next主题添加统计文章阅读量、评论等功能"></a>Hexo博客Next主题添加统计文章阅读量、评论等功能</h2><p><a href="https://blog.csdn.net/qq_32566003/article/details/116564864">如何为next主题添加不蒜子统计</a><br><a href='https://blog.csdn.net/Time888/article/details/74203939?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&spm=1001.2101.3001.4242.1&utm_relevant_index=3'>为NexT主题添加文章阅读量统计功能</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href='https://zhuanlan.zhihu.com/p/26625249'>GitHub+Hexo 搭建个人网站详细教程</a><br><a href='https://mackvord.github.io/aplayer-dplayer/547187035.html'>Aplayer &amp; Dplayer 嵌入音频和视频</a><br><a href='https://blog.csdn.net/as480133937/article/details/100138838'>Hexo-Next 主题博客个性化配置超详细，超全面(两万字)</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>科研信息</title>
    <url>/2022/03/20/%E7%A7%91%E7%A0%94%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>做科研相关资料</p>
<span id="more"></span>

<h2 id="Hierarchical-Visual-Concept-Interpretation-for-Medical-Image-Classification"><a href="#Hierarchical-Visual-Concept-Interpretation-for-Medical-Image-Classification" class="headerlink" title="Hierarchical Visual Concept Interpretation for Medical Image Classification"></a>Hierarchical Visual Concept Interpretation for Medical Image Classification</h2><h2 id="Smooth-Adversarial-Training"><a href="#Smooth-Adversarial-Training" class="headerlink" title="Smooth Adversarial Training"></a>Smooth Adversarial Training</h2><p>同时提高Acc和鲁棒性</p>
<h2 id="Generate-Natural-Adversarial-Examples"><a href="#Generate-Natural-Adversarial-Examples" class="headerlink" title="Generate Natural Adversarial Examples"></a>Generate Natural Adversarial Examples</h2><h2 id="AdvFlow-Inconspicuous-Black-box-Adversarial-Attacks-using-Normalizing-Flows-NIPS-2020"><a href="#AdvFlow-Inconspicuous-Black-box-Adversarial-Attacks-using-Normalizing-Flows-NIPS-2020" class="headerlink" title="AdvFlow: Inconspicuous Black-box Adversarial Attacks using Normalizing Flows, NIPS 2020"></a>AdvFlow: Inconspicuous Black-box Adversarial Attacks using Normalizing Flows, NIPS 2020</h2><p>生成的对抗样本能围绕在干净样本附近</p>
<h2 id="Adversarial-Distributional-Training-for-Robust-Deep-Learning-NIPS-2020"><a href="#Adversarial-Distributional-Training-for-Robust-Deep-Learning-NIPS-2020" class="headerlink" title="Adversarial Distributional Training for Robust Deep Learning, NIPS 2020"></a>Adversarial Distributional Training for Robust Deep Learning, NIPS 2020</h2><p>产生分布更广的对抗样本</p>
<h2 id="Attribute-Guided-Adversarial-Training-for-Robustness-to-Natural-Perturbations-AAAI-2021"><a href="#Attribute-Guided-Adversarial-Training-for-Robustness-to-Natural-Perturbations-AAAI-2021" class="headerlink" title="Attribute-Guided Adversarial Training for Robustness to Natural Perturbations. AAAI 2021"></a>Attribute-Guided Adversarial Training for Robustness to Natural Perturbations. AAAI 2021</h2><p>如果预测的对抗样本和训练的对抗样本没有来自同一分布，就会导致鲁棒性的下降。所以本文在内部最大化时，操纵图像属性空间的变化，这样训练出来的模型更具鲁棒性。</p>
<h2 id="Mart算法流程"><a href="#Mart算法流程" class="headerlink" title="Mart算法流程"></a>Mart算法流程</h2><p><a href="https://www.geek-share.com/detail/2803287440.html">https://www.geek-share.com/detail/2803287440.html</a></p>
<h2 id="Mart算法原理解释"><a href="#Mart算法原理解释" class="headerlink" title="Mart算法原理解释"></a>Mart算法原理解释</h2><p><a href="https://muyuuuu.github.io/2021/06/22/MART/">https://muyuuuu.github.io/2021/06/22/MART/</a><br>Mart针对错分样本的loss作为正则化项添加到损失中、Mart_loss&#x3D;对抗样本loss+对抗样本和正常样本的kl散度、Mart目的是提升鲁棒性</p>
<h2 id="TRADES算法实现"><a href="#TRADES算法实现" class="headerlink" title="TRADES算法实现"></a>TRADES算法实现</h2><p><a href="https://github.com/yaodongyu/TRADES">https://github.com/yaodongyu/TRADES</a><br>TRADES的loss&#x3D;正常样本loss+对抗样本和正常样本的KL散度、TRADES目的是提升干净样本准确率</p>
<h2 id="TRADES算法原理"><a href="#TRADES算法原理" class="headerlink" title="TRADES算法原理"></a>TRADES算法原理</h2><p><a href="https://zhuanlan.zhihu.com/p/337989683">https://zhuanlan.zhihu.com/p/337989683</a><br><a href="https://zhuanlan.zhihu.com/p/296809584">https://zhuanlan.zhihu.com/p/296809584</a></p>
<h2 id="SD-layer-stain-deconvolutional-layer-for-CNNs-in-medical-microscopic-imaging"><a href="#SD-layer-stain-deconvolutional-layer-for-CNNs-in-medical-microscopic-imaging" class="headerlink" title="SD-layer: stain deconvolutional layer for CNNs in medical microscopic imaging"></a>SD-layer: stain deconvolutional layer for CNNs in medical microscopic imaging</h2><p>C_NMC</p>
<h2 id="GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images"><a href="#GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images" class="headerlink" title="GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images"></a>GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images</h2><p>数据：</p>
<ul>
<li><p>BRCA-08 (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0009">Gelasca et al., 2008</a>)</p>
</li>
<li><p>SN-AM (ALL) (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0015">Gupta and Gupta, 2019d</a>)</p>
</li>
<li><p>SN-AM (MM) (<a href="https://www.sciencedirect.com/science/article/pii/S1361841520301523#bib0015">Gupta and Gupta, 2019d</a>)</p>
</li>
</ul>
<h2 id="Heterogeneity-Loss-to-Handle-Intersubject-and-Intrasubject-Variability-in-Cancer"><a href="#Heterogeneity-Loss-to-Handle-Intersubject-and-Intrasubject-Variability-in-Cancer" class="headerlink" title="Heterogeneity Loss to Handle Intersubject and Intrasubject Variability in Cancer"></a><strong>Heterogeneity Loss to Handle Intersubject and Intrasubject Variability in Cancer</strong></h2><p>C_NMC 指标：weighted F1Score</p>
<ul>
<li><p>Neighborhood-correction algorithm for classification of normal and malignant cells. In Gupta A. and Gupta R. (eds.), <strong>ISBI</strong></p>
</li>
<li><p>Classification of normal and leukemic blast cells in B-ALL cancer using a combination of convolutional and recurrent neural networks <strong>ISBI</strong></p>
</li>
<li><p>Sdct-auxnetθ: Dct augmented stain deconvolutional cnn with auxiliary classifier for cancer diagnosis. <strong>Medical Image Analysis</strong>, </p>
<p>&#x3D; balanced accuracy、weighted F1</p>
</li>
</ul>
<p>基本上是用flod012训练数据进行交叉验证、或竞赛提供的训练测试集</p>
<h2 id="对抗训练中的过拟合现象和对抗训练技巧总结"><a href="#对抗训练中的过拟合现象和对抗训练技巧总结" class="headerlink" title="对抗训练中的过拟合现象和对抗训练技巧总结"></a>对抗训练中的过拟合现象和对抗训练技巧总结</h2><p><a href="https://blog.csdn.net/motoight/article/details/121972761">https://blog.csdn.net/motoight/article/details/121972761</a><br>对抗训练+数据增广（mixup等）对鲁棒性提升没效果<br>对抗训练技巧：</p>
<ul>
<li>看论文:Bag of Tricks for Adversarial Training（ICLR 2021）</li>
<li>github:<a href="https://github.com/P2333/Bag-of-Tricks-for-AT">https://github.com/P2333/Bag-of-Tricks-for-AT</a></li>
</ul>
<p>对抗训练标准代码：<br><a href="https://github.com/P2333/Bag-of-Tricks-for-AT/blob/master/train_cifar.py">https://github.com/P2333/Bag-of-Tricks-for-AT/blob/master/train_cifar.py</a></p>
<h2 id="对抗训练与稳健性"><a href="#对抗训练与稳健性" class="headerlink" title="对抗训练与稳健性"></a>对抗训练与稳健性</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/296809584">https://zhuanlan.zhihu.com/p/296809584</a></p>
<p>Aleksander Madry等人提出的PGD对抗训练并不使用正常样本，但是后来的TRADES等又指出使用正常样本可以增加模型的精确度</p>
<p>对抗训练除了提升对抗稳健性以外，得到的模型更具可解释的梯度[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_28">28]</a></p>
<p>正常训练得到的模型的梯度都比较杂乱，要解释一个正常训练的模型，往往需要使用一些额外的方法（例如 Grad-CAM[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_30">30]</a>），但是对抗训练得到的模型，使用梯度就可以较好地解释模型的分类结果[<a href="https://zhuanlan.zhihu.com/p/296809584#ref_24">24]</a></p>
<p>正常训练的模型更关注图像纹理，对抗训练模型更关注形状和全局</p>
<h3 id="对抗训练的几个变体"><a href="#对抗训练的几个变体" class="headerlink" title="对抗训练的几个变体"></a>对抗训练的几个变体</h3><p><img src="/../images/image-20220414214110412.png" alt="image-20220414214110412"></p>
<p>参考：北大哔哩哔哩：<a href="https://www.bilibili.com/video/BV1QK4y1j7nX/?spm_id_from=333.788.recommend_more_video.7">https://www.bilibili.com/video/BV1QK4y1j7nX/?spm_id_from=333.788.recommend_more_video.7</a></p>
<p><img src="/../images/image-20220414214613164.png" alt="image-20220414214613164"></p>
<p>参考：<a href="https://www.bilibili.com/video/BV1aa4y147dg?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1aa4y147dg?spm_id_from=333.337.search-card.all.click</a></p>
<p>SVM这种对抗样本我们如何去防御？</p>
<ul>
<li>攻击主要在特征上，在特征空间上做噪声，尺度什么的，比如文本，在输入字符上做一些操作，防御这一块也是min-max的方式进行。</li>
</ul>
<h3 id="攻击效能指标"><a href="#攻击效能指标" class="headerlink" title="攻击效能指标"></a>攻击效能指标</h3><p><a href="https://jjzhou012.github.io/blog/2020/05/25/A-uniform-platform-for-security-analysis-of-deep-learning-model.html#22-%E6%94%BB%E5%87%BB%E6%95%88%E8%83%BD%E6%8C%87%E6%A0%87">https://jjzhou012.github.io/blog/2020/05/25/A-uniform-platform-for-security-analysis-of-deep-learning-model.html#22-%E6%94%BB%E5%87%BB%E6%95%88%E8%83%BD%E6%8C%87%E6%A0%87</a></p>
<h2 id="T-sne-的代码"><a href="#T-sne-的代码" class="headerlink" title="T-sne 的代码"></a>T-sne 的代码</h2><p><a href="https://blog.csdn.net/motoight/article/details/120791928?spm=1001.2014.3001.5502">https://blog.csdn.net/motoight/article/details/120791928?spm=1001.2014.3001.5502</a><br>多尝试不同的perplexity 来得到稳健的效果</p>
<h2 id="INTRIGUING-PROPERTIES-OF-ADVERSARIAL-TRAINING-AT-SCALE"><a href="#INTRIGUING-PROPERTIES-OF-ADVERSARIAL-TRAINING-AT-SCALE" class="headerlink" title="INTRIGUING PROPERTIES OF ADVERSARIAL TRAINING AT SCALE"></a>INTRIGUING PROPERTIES OF ADVERSARIAL TRAINING AT SCALE</h2><p>对抗训练时用混合BN</p>
<h2 id="小组会结论"><a href="#小组会结论" class="headerlink" title="小组会结论"></a>小组会结论</h2><p>白血病异质性大<br>形态是基石，疾病分级还需要细胞化学助阵<br>Recall要大？</p>
<h2 id="C-NMC数据用什么做的数据预处理"><a href="#C-NMC数据用什么做的数据预处理" class="headerlink" title="C_NMC数据用什么做的数据预处理"></a>C_NMC数据用什么做的数据预处理</h2><ol>
<li>论文HETEROGENEITY LOSS TO HANDLE INTERSUBJECT AND INTRASUBJECT VARIABILITY IN CANCER说: <code> The images were normalized for stain color variability (Gupta et al., 2017) and cells, marked by expert oncologists, were segmented (Duggal et al., 2016).</code></li>
</ol>
<ul>
<li><p>Stain color normalization and segmentation of plasma cells in microscopic images as a prelude to development of computer assisted automated disease diagnostic tool in multiple myeloma. Clinical Lymphoma, Myeloma and Leukemia, 17(1):e99, Feb 2017——<strong>染色归一化</strong></p>
</li>
<li><p>Overlapping cell nuclei segmentation in microscopic images using deep belief networks. In Proceedings of the Tenth ICGVIP, pp. 82:1–82:8, 2016 ——<strong>分割白细胞核</strong> ——任何此类研究的第一步都需要从这些簇中分割单个细胞核？？？链接：<a href="http://www.rahulduggal.com/ICVGIP_2016/ICVGIP_16_poster.pdf">http://www.rahulduggal.com/ICVGIP_2016/ICVGIP_16_poster.pdf</a></p>
</li>
<li><p>论文：A color and shape based algorithm for segmentation of white blood cells in peripheral blood and bone marrow images——<strong>分割白细胞核</strong></p>
</li>
</ul>
<ol start="2">
<li><p>C_NMC_readme文件声称用stain color normalization方法去除染色噪声、照明误差<br>并不知道为什么要分割出细胞核</p>
</li>
<li><p>C_NMC预处理步骤：染色归一化-&gt;细胞核分割</p>
</li>
</ol>
<h2 id="C-NMC-final-test-submit"><a href="#C-NMC-final-test-submit" class="headerlink" title="C_NMC final test submit"></a>C_NMC final test submit</h2><p>提交连接：<a href="https://competitions.codalab.org/competitions/20395#participate-submit_results">https://competitions.codalab.org/competitions/20395#participate-submit_results</a></p>
<h3 id="关于C-NMC数据分割成细胞核的原因，作者回答"><a href="#关于C-NMC数据分割成细胞核的原因，作者回答" class="headerlink" title="关于C_NMC数据分割成细胞核的原因，作者回答"></a>关于C_NMC数据分割成细胞核的原因，作者回答</h3><p>邮件链接：<a href="https://mail.qq.com/cgi-bin/frame_html?sid=hpIBU9GIACx0TQRm&amp;target=today">https://mail.qq.com/cgi-bin/frame_html?sid=hpIBU9GIACx0TQRm&amp;target=today</a></p>
<blockquote>
<p>Since the problem is on cell image classification and B-ALL cells do not have much cytoplasm, that is why it consists of only segmented nuclei.</p>
</blockquote>
<blockquote>
<p>Here is the link. You can sign in and participate in the leaderboard for assessing your performance on the testset.</p>
</blockquote>
<blockquote>
<p><a href="https://competitions.codalab.org/competitions/20395#participate">https://competitions.codalab.org/competitions/20395#participate</a></p>
</blockquote>
<blockquote>
<p>On Sat, Apr 9, 2022 at 1:27 PM lxy &lt;<a href="mailto:lxy_from_swust@foxmail.com">lxy_from_swust@foxmail.com</a>&gt; wrote:</p>
</blockquote>
<blockquote>
<p>Dear Dr. Anubha Gupta:</p>
<p>​    Thank you for reading!</p>
<p>​    I am a second-year master’s student at Shenzhen University, China. My name is mona, and my Chinese is Xinyuan Liu。</p>
<p>​    I’ve been using your dataset C_NMC for some experiments recently, but I don’t understand why the C_NMC data are segmented nuclei without any background, what is the motivation for this? The second question is how do I use the final test for testing? I could not find a portal on the competition website to submit the final test set results, so I don’t know the performance of my model on the final test.</p>
<p>   Thank you very much for your kind consideration and I would like to know how to solve these two problems and looking forward to your early reply.</p>
<p>Sincerely, yours</p>
<p>mona</p>
</blockquote>
<p>--</p>
<p>-———————————————–<br>Dr. Anubha Gupta<br>Professor, Deptt. of ECE<br>Member, Infosys Center for AI, IIIT Delhi<br>Member, Center of Excellence in Healthcare, IIIT-Delhi.<br><a href="http://faculty.iiitd.ac.in/~anubha/">http://faculty.iiitd.ac.in/~anubha/</a><br>Lab: <a href="http://sbilab.iiitd.edu.in/index.html">http://sbilab.iiitd.edu.in/index.html</a></p>
<h2 id="GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images-1"><a href="#GCTI-SN-Geometry-inspired-chemical-and-tissue-invariant-stain-normalization-of-microscopic-medical-images-1" class="headerlink" title="GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images"></a>GCTI-SN: Geometry-inspired chemical and tissue invariant stain normalization of microscopic medical images</h2><p>一个显微图像的染色标准化方法GCTI-SN，校正光照变化、染色化学物质和染色量变化<br>C_NMC</p>
<h2 id="SD-Layer-Stain-Deconvolutional-Layer-for-CNNs-in-Medical-Microscopic-Imaging"><a href="#SD-Layer-Stain-Deconvolutional-Layer-for-CNNs-in-Medical-Microscopic-Imaging" class="headerlink" title="SD-Layer: Stain Deconvolutional Layer for CNNs in Medical Microscopic Imaging"></a>SD-Layer: Stain Deconvolutional Layer for CNNs in Medical Microscopic Imaging</h2><p>分类恶性未成熟白细胞 (WBC) 和正常未成熟白细胞<br>创新在于提出SD-Layer层</p>
]]></content>
      <tags>
        <tag>keyan</tag>
      </tags>
  </entry>
  <entry>
    <title>优质资源</title>
    <url>/2022/03/17/%E6%94%B6%E9%9B%86%E4%BC%98%E7%A7%80%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>收集优秀的博客、公众号等，便于时常阅读</p>
<span id="more"></span>

<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href='https://muyiy.cn/blog/'>木易杨前端进阶</a><br><a href='https://staging-cn.vuejs.org/guide/typescript/composition-api.html'>更清楚的Vue3文档</a></p>
]]></content>
  </entry>
</search>
